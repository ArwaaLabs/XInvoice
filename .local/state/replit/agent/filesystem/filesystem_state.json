{"file_contents":{"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Plus, Mail, Phone, MapPin, MoreVertical, Edit, Trash2 } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ntype Client = {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string | null;\n  address: string | null;\n  taxId?: string | null;\n};\n\ntype Invoice = {\n  id: string;\n  clientId: string;\n  currency?: string;\n  items: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: string;\n    discount: string;\n    discountType: string;\n    taxRate: string;\n  }>;\n};\n\nexport default function Clients() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n  });\n  const { toast } = useToast();\n\n  const { data: clients = [], isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: invoices = [] } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const filteredClients = clients.filter(\n    (client) =>\n      client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      client.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getClientStats = (clientId: string) => {\n    const clientInvoices = invoices.filter(inv => inv.clientId === clientId);\n    \n    const revenueByCurrency = clientInvoices.reduce((acc, inv) => {\n      const currency = inv.currency || \"USD\";\n      const total = inv.items.reduce((itemSum, item) => {\n        const subtotal = item.quantity * parseFloat(item.unitPrice);\n        let discountAmount = 0;\n        if (item.discountType === \"percentage\") {\n          discountAmount = (subtotal * parseFloat(item.discount)) / 100;\n        } else {\n          discountAmount = parseFloat(item.discount);\n        }\n        const afterDiscount = subtotal - discountAmount;\n        const taxAmount = (afterDiscount * parseFloat(item.taxRate)) / 100;\n        return itemSum + afterDiscount + taxAmount;\n      }, 0);\n      \n      acc[currency] = (acc[currency] || 0) + total;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const getCurrencySymbol = (code: string) => {\n      const map: Record<string, string> = { USD: \"$\", EUR: \"€\", GBP: \"£\", JPY: \"¥\" };\n      return map[code] || code;\n    };\n\n    const revenueDisplay = Object.entries(revenueByCurrency)\n      .map(([curr, amt]) => `${getCurrencySymbol(curr)}${Math.round(amt).toLocaleString()}`)\n      .join(\" + \") || \"$0\";\n\n    return {\n      totalInvoices: clientInvoices.length,\n      revenueDisplay,\n    };\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map((n) => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const openAddDialog = () => {\n    setEditingClient(null);\n    setFormData({ name: \"\", email: \"\", phone: \"\", address: \"\" });\n    setDialogOpen(true);\n  };\n\n  const openEditDialog = (client: Client) => {\n    setEditingClient(client);\n    setFormData({\n      name: client.name,\n      email: client.email,\n      phone: client.phone || \"\",\n      address: client.address || \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleSave = async () => {\n    try {\n      if (editingClient) {\n        await apiRequest(\"PATCH\", `/api/clients/${editingClient.id}`, formData);\n        toast({\n          title: \"Client updated\",\n          description: \"Client information has been successfully updated.\",\n        });\n      } else {\n        await apiRequest(\"POST\", \"/api/clients\", formData);\n        toast({\n          title: \"Client added\",\n          description: \"New client has been successfully added.\",\n        });\n      }\n      await queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      setDialogOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingClient ? \"update\" : \"add\"} client.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = async (id: string) => {\n    try {\n      await apiRequest(\"DELETE\", `/api/clients/${id}`);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Client deleted\",\n        description: \"Client has been successfully deleted.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete client.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Clients</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your client information and history\n          </p>\n        </div>\n        <Button onClick={openAddDialog} data-testid=\"button-add-client\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          Add Client\n        </Button>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search clients...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search-clients\"\n        />\n      </div>\n\n      {isLoading ? (\n        <div className=\"h-48 flex items-center justify-center text-muted-foreground\">\n          Loading clients...\n        </div>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {filteredClients.map((client) => {\n            const stats = getClientStats(client.id);\n            return (\n              <Card key={client.id} className=\"hover-elevate\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar>\n                        <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                          {getInitials(client.name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-semibold\" data-testid={`text-client-${client.id}`}>{client.name}</h3>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {stats.totalInvoices} invoices\n                        </p>\n                      </div>\n                    </div>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"icon\" data-testid={`button-menu-${client.id}`}>\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => openEditDialog(client)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem \n                          onClick={() => handleDelete(client.id)}\n                          className=\"text-destructive\"\n                        >\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Mail className=\"h-3 w-3\" />\n                      <span className=\"truncate\">{client.email}</span>\n                    </div>\n                    {client.phone && (\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Phone className=\"h-3 w-3\" />\n                        <span>{client.phone}</span>\n                      </div>\n                    )}\n                    {client.address && (\n                      <div className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                        <MapPin className=\"h-3 w-3 mt-0.5\" />\n                        <span className=\"line-clamp-2\">{client.address}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"mt-4 pt-4 border-t flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Total Revenue</span>\n                    <span className=\"text-lg font-semibold font-mono\">\n                      {stats.revenueDisplay}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>{editingClient ? \"Edit Client\" : \"Add New Client\"}</DialogTitle>\n            <DialogDescription>\n              {editingClient ? \"Update client information\" : \"Create a new client to add to your invoices\"}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Client Name</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Acme Corporation\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                data-testid=\"input-client-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"contact@acme.com\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                data-testid=\"input-client-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone (Optional)</Label>\n              <Input\n                id=\"phone\"\n                placeholder=\"+1 (555) 123-4567\"\n                value={formData.phone}\n                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                data-testid=\"input-client-phone\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                placeholder=\"123 Main St, City, State 12345\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                data-testid=\"input-client-address\"\n              />\n            </div>\n            <Button onClick={handleSave} className=\"w-full\" data-testid=\"button-save-client\">\n              {editingClient ? \"Update Client\" : \"Add Client\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12128},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is not set\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql, { schema });\n","size_bytes":332},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/invoice-preview.tsx":{"content":"import { format } from \"date-fns\";\nimport { Calendar, Mail, Phone, MapPin, FileText } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\n\ntype InvoiceData = {\n  invoiceNumber: string;\n  issueDate: Date;\n  dueDate: Date;\n  status: \"draft\" | \"sent\" | \"paid\" | \"overdue\";\n  company: {\n    name: string;\n    email: string;\n    phone: string;\n    address: string;\n    logo?: string;\n  };\n  client: {\n    name: string;\n    email: string;\n    address: string;\n  };\n  items: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: number;\n    discount: number;\n    discountType: \"percentage\" | \"fixed\";\n    taxRate: number;\n  }>;\n  currency: string;\n  notes?: string;\n  template?: \"modern\" | \"classic\" | \"minimal\";\n  primaryColor?: string;\n};\n\ntype InvoicePreviewProps = {\n  data: InvoiceData;\n};\n\nfunction calculateItemTotal(item: { quantity: number; unitPrice: number; discount: number; discountType: \"percentage\" | \"fixed\"; taxRate: number }) {\n  const subtotal = item.quantity * item.unitPrice;\n  let discountAmount = 0;\n  if (item.discountType === \"percentage\") {\n    discountAmount = (subtotal * item.discount) / 100;\n  } else {\n    discountAmount = item.discount;\n  }\n  const afterDiscount = subtotal - discountAmount;\n  const taxAmount = (afterDiscount * item.taxRate) / 100;\n  return afterDiscount + taxAmount;\n}\n\nexport function InvoicePreview({ data }: InvoicePreviewProps) {\n  const subtotal = data.items.reduce(\n    (sum, item) => sum + item.quantity * item.unitPrice,\n    0\n  );\n  const totalDiscount = data.items.reduce((sum, item) => {\n    const itemSubtotal = item.quantity * item.unitPrice;\n    return (\n      sum +\n      (item.discountType === \"percentage\"\n        ? (itemSubtotal * item.discount) / 100\n        : item.discount)\n    );\n  }, 0);\n  const totalTax = data.items.reduce((sum, item) => {\n    const itemSubtotal = item.quantity * item.unitPrice;\n    const discountAmount =\n      item.discountType === \"percentage\"\n        ? (itemSubtotal * item.discount) / 100\n        : item.discount;\n    return sum + ((itemSubtotal - discountAmount) * item.taxRate) / 100;\n  }, 0);\n  const total = subtotal - totalDiscount + totalTax;\n\n  const statusColors = {\n    draft: \"bg-muted text-muted-foreground\",\n    sent: \"bg-chart-3 text-white\",\n    paid: \"bg-chart-2 text-white\",\n    overdue: \"bg-destructive text-destructive-foreground\",\n  };\n\n  const template = data.template || \"modern\";\n  const primaryColor = data.primaryColor || \"#3B82F6\";\n\n  if (template === \"classic\") {\n    return (\n      <Card className=\"p-8 max-w-4xl\">\n        <div className=\"space-y-8\">\n          <div className=\"border-b pb-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-2\">\n                {data.company.logo ? (\n                  <img src={data.company.logo} alt=\"Company Logo\" className=\"h-10\" />\n                ) : (\n                  <h1 className=\"text-2xl font-serif font-bold\">{data.company.name}</h1>\n                )}\n              </div>\n              <div className=\"text-right space-y-1\">\n                <h2 className=\"text-3xl font-serif font-bold\" data-testid=\"text-invoice-number\">\n                  INVOICE\n                </h2>\n                <p className=\"text-lg font-mono\">#{data.invoiceNumber}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-8\">\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"text-sm font-serif font-bold mb-2\">From:</h3>\n                <div className=\"space-y-1 text-sm\">\n                  <p className=\"font-medium\">{data.company.name}</p>\n                  <p className=\"text-muted-foreground\">{data.company.email}</p>\n                  <p className=\"text-muted-foreground\">{data.company.phone}</p>\n                  <p className=\"text-muted-foreground\">{data.company.address}</p>\n                </div>\n              </div>\n              <div>\n                <h3 className=\"text-sm font-serif font-bold mb-2\">Bill To:</h3>\n                <div className=\"space-y-1 text-sm\">\n                  <p className=\"font-medium\">{data.client.name}</p>\n                  <p className=\"text-muted-foreground\">{data.client.email}</p>\n                  <p className=\"text-muted-foreground\">{data.client.address}</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-serif font-bold\">Invoice Date:</span>\n                <span>{format(data.issueDate, \"MMM dd, yyyy\")}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-serif font-bold\">Due Date:</span>\n                <span>{format(data.dueDate, \"MMM dd, yyyy\")}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-serif font-bold\">Status:</span>\n                <Badge className={statusColors[data.status]} data-testid=\"badge-invoice-status\">\n                  {data.status.toUpperCase()}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"border-y\">\n              <table className=\"w-full\">\n                <thead className=\"border-b\">\n                  <tr className=\"text-sm font-serif font-bold\">\n                    <th className=\"text-left p-3\">Description</th>\n                    <th className=\"text-right p-3\">Qty</th>\n                    <th className=\"text-right p-3\">Rate</th>\n                    <th className=\"text-right p-3\">Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.items.map((item, index) => (\n                    <tr key={index} className=\"border-b\">\n                      <td className=\"p-3\">{item.description}</td>\n                      <td className=\"p-3 text-right font-mono\">{item.quantity}</td>\n                      <td className=\"p-3 text-right font-mono\">\n                        {data.currency}{item.unitPrice.toFixed(2)}\n                      </td>\n                      <td className=\"p-3 text-right font-mono font-medium\">\n                        {data.currency}{calculateItemTotal(item).toFixed(2)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <div className=\"w-80 space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Subtotal</span>\n                  <span className=\"font-mono\">{data.currency}{subtotal.toFixed(2)}</span>\n                </div>\n                {totalDiscount > 0 && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Discount</span>\n                    <span className=\"font-mono\">-{data.currency}{totalDiscount.toFixed(2)}</span>\n                  </div>\n                )}\n                {totalTax > 0 && (\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Tax</span>\n                    <span className=\"font-mono\">{data.currency}{totalTax.toFixed(2)}</span>\n                  </div>\n                )}\n                <div className=\"border-t pt-2\"></div>\n                <div className=\"flex justify-between text-lg font-serif font-bold\">\n                  <span>Total Due:</span>\n                  <span className=\"font-mono\" data-testid=\"text-total\">\n                    {data.currency}{total.toFixed(2)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {data.notes && (\n            <div className=\"space-y-2 border-t pt-6\">\n              <h3 className=\"text-sm font-serif font-bold\">Notes:</h3>\n              <p className=\"text-sm\">{data.notes}</p>\n            </div>\n          )}\n        </div>\n      </Card>\n    );\n  }\n\n  if (template === \"minimal\") {\n    return (\n      <Card className=\"p-8 max-w-4xl\">\n        <div className=\"space-y-6\">\n          <div className=\"flex items-start justify-between\">\n            {data.company.logo && (\n              <img src={data.company.logo} alt=\"Company Logo\" className=\"h-8\" />\n            )}\n            <div className=\"text-right\">\n              <p className=\"text-xl font-light\">Invoice</p>\n              <p className=\"text-sm font-mono\" data-testid=\"text-invoice-number\">#{data.invoiceNumber}</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-6 text-sm\">\n            <div>\n              <p className=\"font-medium\">{data.company.name}</p>\n              <p className=\"text-muted-foreground\">{data.company.email}</p>\n              <p className=\"text-muted-foreground\">{data.company.phone}</p>\n              <p className=\"text-muted-foreground\">{data.company.address}</p>\n            </div>\n            <div>\n              <p className=\"font-medium\">{data.client.name}</p>\n              <p className=\"text-muted-foreground\">{data.client.email}</p>\n              <p className=\"text-muted-foreground\">{data.client.address}</p>\n            </div>\n          </div>\n\n          <div className=\"flex gap-6 text-sm\">\n            <div>\n              <span className=\"text-muted-foreground\">Issued: </span>\n              <span>{format(data.issueDate, \"MMM dd, yyyy\")}</span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Due: </span>\n              <span>{format(data.dueDate, \"MMM dd, yyyy\")}</span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Status: </span>\n              <Badge className={statusColors[data.status]} data-testid=\"badge-invoice-status\">\n                {data.status}\n              </Badge>\n            </div>\n          </div>\n\n          <div>\n            <table className=\"w-full text-sm\">\n              <thead className=\"border-b\">\n                <tr className=\"text-xs uppercase text-muted-foreground\">\n                  <th className=\"text-left pb-2\">Description</th>\n                  <th className=\"text-right pb-2\">Qty</th>\n                  <th className=\"text-right pb-2\">Rate</th>\n                  <th className=\"text-right pb-2\">Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.items.map((item, index) => (\n                  <tr key={index} className=\"border-b\">\n                    <td className=\"py-3\">{item.description}</td>\n                    <td className=\"py-3 text-right font-mono\">{item.quantity}</td>\n                    <td className=\"py-3 text-right font-mono\">\n                      {data.currency}{item.unitPrice.toFixed(2)}\n                    </td>\n                    <td className=\"py-3 text-right font-mono\">\n                      {data.currency}{calculateItemTotal(item).toFixed(2)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <div className=\"w-64 space-y-1 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Subtotal</span>\n                <span className=\"font-mono\">{data.currency}{subtotal.toFixed(2)}</span>\n              </div>\n              {totalDiscount > 0 && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Discount</span>\n                  <span className=\"font-mono\">-{data.currency}{totalDiscount.toFixed(2)}</span>\n                </div>\n              )}\n              {totalTax > 0 && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Tax</span>\n                  <span className=\"font-mono\">{data.currency}{totalTax.toFixed(2)}</span>\n                </div>\n              )}\n              <div className=\"flex justify-between pt-2 border-t\">\n                <span className=\"font-medium\">Total</span>\n                <span className=\"font-medium font-mono\" data-testid=\"text-total\">\n                  {data.currency}{total.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {data.notes && (\n            <div className=\"text-sm border-t pt-4\">\n              <p className=\"text-muted-foreground mb-1\">Notes:</p>\n              <p>{data.notes}</p>\n            </div>\n          )}\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"p-8 max-w-4xl\">\n      <div className=\"space-y-8\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-2\">\n            {data.company.logo ? (\n              <img src={data.company.logo} alt=\"Company Logo\" className=\"h-12\" />\n            ) : (\n              <div className=\"flex items-center gap-2\">\n                <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n                  <FileText className=\"h-6 w-6\" />\n                </div>\n                <h1 className=\"text-2xl font-semibold\">{data.company.name}</h1>\n              </div>\n            )}\n          </div>\n          <div className=\"text-right space-y-1\">\n            <Badge className={statusColors[data.status]} data-testid=\"badge-invoice-status\">\n              {data.status.toUpperCase()}\n            </Badge>\n            <h2 className=\"text-3xl font-semibold font-mono\" data-testid=\"text-invoice-number\">\n              #{data.invoiceNumber}\n            </h2>\n            <p className=\"text-sm text-muted-foreground\">INVOICE</p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-8\">\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">From</h3>\n              <div className=\"space-y-1\">\n                <p className=\"font-medium\">{data.company.name}</p>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Mail className=\"h-3 w-3\" />\n                  <span>{data.company.email}</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Phone className=\"h-3 w-3\" />\n                  <span>{data.company.phone}</span>\n                </div>\n                <div className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                  <MapPin className=\"h-3 w-3 mt-0.5\" />\n                  <span>{data.company.address}</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium text-muted-foreground mb-2\">Bill To</h3>\n              <div className=\"space-y-1\">\n                <p className=\"font-medium\">{data.client.name}</p>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Mail className=\"h-3 w-3\" />\n                  <span>{data.client.email}</span>\n                </div>\n                <div className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                  <MapPin className=\"h-3 w-3 mt-0.5\" />\n                  <span>{data.client.address}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Issue Date</span>\n              <span className=\"font-medium flex items-center gap-2\">\n                <Calendar className=\"h-3 w-3\" />\n                {format(data.issueDate, \"MMM dd, yyyy\")}\n              </span>\n            </div>\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Due Date</span>\n              <span className=\"font-medium flex items-center gap-2\">\n                <Calendar className=\"h-3 w-3\" />\n                {format(data.dueDate, \"MMM dd, yyyy\")}\n              </span>\n            </div>\n            <Separator />\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Amount Due</span>\n              <span className=\"text-2xl font-semibold font-mono\" data-testid=\"text-total\">\n                {data.currency}{total.toFixed(2)}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"rounded-lg border overflow-hidden\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted/50\">\n                <tr className=\"text-sm\">\n                  <th className=\"text-left p-4 font-medium\">Description</th>\n                  <th className=\"text-right p-4 font-medium\">Qty</th>\n                  <th className=\"text-right p-4 font-medium\">Rate</th>\n                  <th className=\"text-right p-4 font-medium\">Discount</th>\n                  <th className=\"text-right p-4 font-medium\">Tax</th>\n                  <th className=\"text-right p-4 font-medium\">Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.items.map((item, index) => (\n                  <tr key={index} className=\"border-t\">\n                    <td className=\"p-4\">{item.description}</td>\n                    <td className=\"p-4 text-right font-mono\">{item.quantity}</td>\n                    <td className=\"p-4 text-right font-mono\">\n                      {data.currency}{item.unitPrice.toFixed(2)}\n                    </td>\n                    <td className=\"p-4 text-right font-mono text-sm text-muted-foreground\">\n                      {item.discount > 0\n                        ? item.discountType === \"percentage\"\n                          ? `${item.discount}%`\n                          : `${data.currency}${item.discount}`\n                        : \"-\"}\n                    </td>\n                    <td className=\"p-4 text-right font-mono text-sm text-muted-foreground\">\n                      {item.taxRate > 0 ? `${item.taxRate}%` : \"-\"}\n                    </td>\n                    <td className=\"p-4 text-right font-mono font-medium\">\n                      {data.currency}{calculateItemTotal(item).toFixed(2)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <div className=\"w-80 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Subtotal</span>\n                <span className=\"font-mono\">{data.currency}{subtotal.toFixed(2)}</span>\n              </div>\n              {totalDiscount > 0 && (\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Total Discount</span>\n                  <span className=\"font-mono text-destructive\">\n                    -{data.currency}{totalDiscount.toFixed(2)}\n                  </span>\n                </div>\n              )}\n              {totalTax > 0 && (\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Total Tax</span>\n                  <span className=\"font-mono\">{data.currency}{totalTax.toFixed(2)}</span>\n                </div>\n              )}\n              <Separator />\n              <div className=\"flex justify-between text-lg\">\n                <span className=\"font-semibold\">Total</span>\n                <span className=\"font-semibold font-mono\">\n                  {data.currency}{total.toFixed(2)}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {data.notes && (\n          <div className=\"space-y-2\">\n            <h3 className=\"text-sm font-medium text-muted-foreground\">Notes</h3>\n            <p className=\"text-sm\">{data.notes}</p>\n          </div>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":20247},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/examples/InvoiceListTable.tsx":{"content":"import { InvoiceListTable, type InvoiceListItem } from \"../invoice-list-table\";\n\nexport default function InvoiceListTableExample() {\n  const invoices: InvoiceListItem[] = [\n    {\n      id: \"1\",\n      invoiceNumber: \"INV-1001\",\n      clientName: \"Tech Corp\",\n      issueDate: new Date(\"2025-10-01\"),\n      dueDate: new Date(\"2025-10-31\"),\n      amount: 3456.78,\n      status: \"paid\",\n    },\n    {\n      id: \"2\",\n      invoiceNumber: \"INV-1002\",\n      clientName: \"Design Agency\",\n      issueDate: new Date(\"2025-10-05\"),\n      dueDate: new Date(\"2025-11-05\"),\n      amount: 1234.56,\n      status: \"sent\",\n    },\n    {\n      id: \"3\",\n      invoiceNumber: \"INV-1003\",\n      clientName: \"Startup Inc\",\n      issueDate: new Date(\"2025-10-10\"),\n      dueDate: new Date(\"2025-11-10\"),\n      amount: 890.00,\n      status: \"draft\",\n    },\n  ];\n\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <InvoiceListTable\n        invoices={invoices}\n        currency=\"$\"\n        onView={(id) => console.log(\"View invoice\", id)}\n        onDownload={(id) => console.log(\"Download invoice\", id)}\n        onSend={(id) => console.log(\"Send invoice\", id)}\n        onDelete={(id) => console.log(\"Delete invoice\", id)}\n      />\n    </div>\n  );\n}\n","size_bytes":1223},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport InvoiceEditor from \"@/pages/invoice-editor\";\nimport Invoices from \"@/pages/invoices\";\nimport Clients from \"@/pages/clients\";\nimport Settings from \"@/pages/settings\";\nimport Landing from \"@/pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"h-12 w-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n        <Route component={Landing} />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/invoice/new\" component={InvoiceEditor} />\n      <Route path=\"/invoice/:id\" component={InvoiceEditor} />\n      <Route path=\"/invoices\" component={Invoices} />\n      <Route path=\"/clients\" component={Clients} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <AuthenticatedApp style={style} />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nfunction AuthenticatedApp({ style }: { style: Record<string, string> }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading || !isAuthenticated) {\n    return <Router />;\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-4\">\n              <UserMenu />\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto p-6\">\n            <Router />\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction UserMenu() {\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  return (\n    <div className=\"flex items-center gap-3\">\n      {user.profileImageUrl && (\n        <img \n          src={user.profileImageUrl} \n          alt={user.firstName || \"User\"} \n          className=\"h-8 w-8 rounded-full object-cover\"\n        />\n      )}\n      <div className=\"flex flex-col items-end\">\n        {(user.firstName || user.lastName) && (\n          <span className=\"text-sm font-medium\">\n            {user.firstName} {user.lastName}\n          </span>\n        )}\n      </div>\n      <button\n        onClick={() => window.location.href = \"/api/logout\"}\n        className=\"text-sm text-muted-foreground hover:text-foreground\"\n        data-testid=\"button-logout\"\n      >\n        Logout\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":3919},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertClientSchema, insertInvoiceSchema, insertLineItemSchema, insertCompanySettingsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up authentication first\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Client routes - all protected\n  app.get(\"/api/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const clients = await storage.getAllClients(userId);\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ error: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const client = await storage.getClient(req.params.id, userId);\n      if (!client) {\n        return res.status(404).json({ error: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertClientSchema.parse({ ...req.body, userId });\n      const client = await storage.createClient(data);\n      res.status(201).json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create client\" });\n    }\n  });\n\n  app.patch(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, userId, data);\n      if (!client) {\n        return res.status(404).json({ error: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const deleted = await storage.deleteClient(req.params.id, userId);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Client not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete client\" });\n    }\n  });\n\n  // Invoice routes - all protected\n  app.get(\"/api/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoices = await storage.getAllInvoices(userId);\n      const invoicesWithItems = await Promise.all(\n        invoices.map(async (invoice) => {\n          const items = await storage.getLineItemsByInvoiceId(invoice.id);\n          return { ...invoice, items };\n        })\n      );\n      res.json(invoicesWithItems);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ error: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoice = await storage.getInvoice(req.params.id, userId);\n      if (!invoice) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      const items = await storage.getLineItemsByInvoiceId(invoice.id);\n      res.json({ ...invoice, items });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { items, ...invoiceData } = req.body;\n      const invoiceInput = insertInvoiceSchema.parse({ ...invoiceData, userId });\n      \n      const invoice = await storage.createInvoice(invoiceInput);\n      \n      const createdItems = [];\n      if (items && Array.isArray(items)) {\n        for (const item of items) {\n          const itemData = insertLineItemSchema.parse({\n            ...item,\n            invoiceId: invoice.id,\n          });\n          const createdItem = await storage.createLineItem(itemData);\n          createdItems.push(createdItem);\n        }\n      }\n      \n      res.status(201).json({ ...invoice, items: createdItems });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create invoice\" });\n    }\n  });\n\n  app.patch(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { items, ...invoiceData } = req.body;\n      \n      let invoice;\n      if (Object.keys(invoiceData).length > 0) {\n        const invoiceInput = insertInvoiceSchema.partial().parse(invoiceData);\n        invoice = await storage.updateInvoice(req.params.id, userId, invoiceInput);\n        if (!invoice) {\n          return res.status(404).json({ error: \"Invoice not found\" });\n        }\n      } else {\n        invoice = await storage.getInvoice(req.params.id, userId);\n        if (!invoice) {\n          return res.status(404).json({ error: \"Invoice not found\" });\n        }\n      }\n\n      if (items && Array.isArray(items)) {\n        await storage.deleteLineItemsByInvoiceId(req.params.id);\n        \n        const createdItems = [];\n        for (const item of items) {\n          const itemData = insertLineItemSchema.parse({\n            ...item,\n            invoiceId: req.params.id,\n          });\n          const createdItem = await storage.createLineItem(itemData);\n          createdItems.push(createdItem);\n        }\n        \n        res.json({ ...invoice, items: createdItems });\n      } else {\n        const existingItems = await storage.getLineItemsByInvoiceId(req.params.id);\n        res.json({ ...invoice, items: existingItems });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update invoice\" });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const deleted = await storage.deleteInvoice(req.params.id, userId);\n      if (!deleted) {\n        return res.status(404).json({ error: \"Invoice not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Settings routes - protected and user-specific\n  app.get(\"/api/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const settings = await storage.getCompanySettings(userId);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = insertCompanySettingsSchema.parse(req.body);\n      const settings = await storage.createOrUpdateCompanySettings(userId, data);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      console.error(\"Error updating settings:\", error);\n      res.status(500).json({ error: \"Failed to update settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8391},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/storage.ts":{"content":"import {\n  type Client,\n  type InsertClient,\n  type Invoice,\n  type InsertInvoice,\n  type LineItem,\n  type InsertLineItem,\n  type CompanySettings,\n  type InsertCompanySettings,\n  type User,\n  type UpsertUser,\n  users,\n  clients,\n  invoices,\n  lineItems,\n  companySettings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Client operations\n  getClient(id: string, userId: string): Promise<Client | undefined>;\n  getAllClients(userId: string): Promise<Client[]>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, userId: string, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: string, userId: string): Promise<boolean>;\n\n  // Invoice operations\n  getInvoice(id: string, userId: string): Promise<Invoice | undefined>;\n  getAllInvoices(userId: string): Promise<Invoice[]>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: string, userId: string, invoice: Partial<InsertInvoice>): Promise<Invoice | undefined>;\n  deleteInvoice(id: string, userId: string): Promise<boolean>;\n\n  // Line item operations\n  getLineItemsByInvoiceId(invoiceId: string): Promise<LineItem[]>;\n  createLineItem(lineItem: InsertLineItem): Promise<LineItem>;\n  updateLineItem(id: string, lineItem: Partial<InsertLineItem>): Promise<LineItem | undefined>;\n  deleteLineItem(id: string): Promise<boolean>;\n  deleteLineItemsByInvoiceId(invoiceId: string): Promise<void>;\n\n  // Company settings operations\n  getCompanySettings(userId: string): Promise<CompanySettings | undefined>;\n  createOrUpdateCompanySettings(userId: string, settings: InsertCompanySettings): Promise<CompanySettings>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Client operations\n  async getClient(id: string, userId: string): Promise<Client | undefined> {\n    const [client] = await db\n      .select()\n      .from(clients)\n      .where(and(eq(clients.id, id), eq(clients.userId, userId)));\n    return client;\n  }\n\n  async getAllClients(userId: string): Promise<Client[]> {\n    return db.select().from(clients).where(eq(clients.userId, userId));\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(insertClient).returning();\n    return client;\n  }\n\n  async updateClient(id: string, userId: string, updates: Partial<InsertClient>): Promise<Client | undefined> {\n    const [client] = await db\n      .update(clients)\n      .set(updates)\n      .where(and(eq(clients.id, id), eq(clients.userId, userId)))\n      .returning();\n    return client;\n  }\n\n  async deleteClient(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(clients)\n      .where(and(eq(clients.id, id), eq(clients.userId, userId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Invoice operations\n  async getInvoice(id: string, userId: string): Promise<Invoice | undefined> {\n    const [invoice] = await db\n      .select()\n      .from(invoices)\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n    return invoice;\n  }\n\n  async getAllInvoices(userId: string): Promise<Invoice[]> {\n    return db.select().from(invoices).where(eq(invoices.userId, userId));\n  }\n\n  async createInvoice(insertInvoice: InsertInvoice): Promise<Invoice> {\n    const [invoice] = await db.insert(invoices).values(insertInvoice).returning();\n    return invoice;\n  }\n\n  async updateInvoice(id: string, userId: string, updates: Partial<InsertInvoice>): Promise<Invoice | undefined> {\n    const [invoice] = await db\n      .update(invoices)\n      .set(updates)\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)))\n      .returning();\n    return invoice;\n  }\n\n  async deleteInvoice(id: string, userId: string): Promise<boolean> {\n    await this.deleteLineItemsByInvoiceId(id);\n    const result = await db\n      .delete(invoices)\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Line item operations\n  async getLineItemsByInvoiceId(invoiceId: string): Promise<LineItem[]> {\n    return db.select().from(lineItems).where(eq(lineItems.invoiceId, invoiceId));\n  }\n\n  async createLineItem(insertLineItem: InsertLineItem): Promise<LineItem> {\n    const [lineItem] = await db.insert(lineItems).values(insertLineItem).returning();\n    return lineItem;\n  }\n\n  async updateLineItem(id: string, updates: Partial<InsertLineItem>): Promise<LineItem | undefined> {\n    const [lineItem] = await db\n      .update(lineItems)\n      .set(updates)\n      .where(eq(lineItems.id, id))\n      .returning();\n    return lineItem;\n  }\n\n  async deleteLineItem(id: string): Promise<boolean> {\n    const result = await db.delete(lineItems).where(eq(lineItems.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async deleteLineItemsByInvoiceId(invoiceId: string): Promise<void> {\n    await db.delete(lineItems).where(eq(lineItems.invoiceId, invoiceId));\n  }\n\n  // Company settings operations\n  async getCompanySettings(userId: string): Promise<CompanySettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(companySettings)\n      .where(eq(companySettings.userId, userId))\n      .limit(1);\n    return settings;\n  }\n\n  async createOrUpdateCompanySettings(userId: string, settings: InsertCompanySettings): Promise<CompanySettings> {\n    const existing = await this.getCompanySettings(userId);\n    \n    if (existing) {\n      const [updated] = await db\n        .update(companySettings)\n        .set(settings)\n        .where(eq(companySettings.userId, userId))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(companySettings)\n        .values({ ...settings, userId })\n        .returning();\n      return created;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6552},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, jsonb, index, foreignKey } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  taxId: text(\"tax_id\"),\n});\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  clientId: varchar(\"client_id\").notNull().references(() => clients.id, { onDelete: \"restrict\" }),\n  issueDate: timestamp(\"issue_date\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default(\"0\"),\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).default(\"0\"),\n  discountType: text(\"discount_type\").default(\"fixed\"),\n  notes: text(\"notes\"),\n  status: text(\"status\").notNull().default(\"draft\"),\n  template: text(\"template\").default(\"modern\"),\n});\n\nexport const lineItems = pgTable(\"line_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull().references(() => invoices.id, { onDelete: \"cascade\" }),\n  description: text(\"description\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 2 }).default(\"0\"),\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).default(\"0\"),\n  discountType: text(\"discount_type\").default(\"percentage\"),\n});\n\nexport const companySettings = pgTable(\"company_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }).unique(),\n  companyName: text(\"company_name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  taxId: text(\"tax_id\"),\n  logo: text(\"logo\"),\n  primaryColor: text(\"primary_color\").default(\"#3B82F6\"),\n  invoicePrefix: text(\"invoice_prefix\").default(\"INV\"),\n  nextInvoiceNumber: integer(\"next_invoice_number\").default(1001),\n  template: text(\"template\").default(\"modern\"),\n  bankName: text(\"bank_name\"),\n  accountNumber: text(\"account_number\"),\n  routingCode: text(\"routing_code\"),\n  swiftCode: text(\"swift_code\"),\n});\n\nexport const upsertUserSchema = createInsertSchema(users);\nexport const insertClientSchema = createInsertSchema(clients).omit({ id: true });\nexport const insertInvoiceSchema = createInsertSchema(invoices, {\n  issueDate: z.coerce.date(),\n  dueDate: z.coerce.date(),\n}).omit({ id: true });\nexport const insertLineItemSchema = createInsertSchema(lineItems).omit({ id: true });\nexport const insertCompanySettingsSchema = createInsertSchema(companySettings).omit({ id: true, userId: true });\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type LineItem = typeof lineItems.$inferSelect;\nexport type InsertLineItem = z.infer<typeof insertLineItemSchema>;\nexport type CompanySettings = typeof companySettings.$inferSelect;\nexport type InsertCompanySettings = z.infer<typeof insertCompanySettingsSchema>;\n","size_bytes":4617},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":666},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/replitAuth.ts":{"content":"// Authentication with direct OAuth providers: Google, GitHub, LinkedIn\nimport * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport { Strategy as LinkedInStrategy } from \"passport-linkedin-oauth2\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as GitHubStrategy } from \"passport-github2\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\nimport { storage } from \"./storage\";\n\n// Configure WebSocket for Neon serverless\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  \n  // Create a PostgreSQL Pool with WebSocket support for session storage\n  const pool = new Pool({ \n    connectionString: process.env.DATABASE_URL,\n  });\n  \n  pool.on('error', (err: Error) => {\n    console.error('Session pool error:', err);\n  });\n  \n  const sessionStore = new pgStore({\n    pool: pool,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  // Only update refresh_token if a new one is provided (refresh responses may not include it)\n  if (tokens.refresh_token) {\n    user.refresh_token = tokens.refresh_token;\n  }\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  // Google OAuth Strategy (if credentials are provided)\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    const googleVerify: any = async (\n      accessToken: string,\n      refreshToken: string,\n      profile: any,\n      done: any\n    ) => {\n      try {\n        const user = {\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          expires_at: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 days\n          claims: {\n            sub: `google:${profile.id}`,\n            email: profile.emails?.[0]?.value || \"\",\n            first_name: profile.name?.givenName || \"\",\n            last_name: profile.name?.familyName || \"\",\n            profile_image_url: profile.photos?.[0]?.value || \"\",\n          },\n        };\n        \n        await upsertUser(user.claims);\n        done(null, user);\n      } catch (error) {\n        done(error, null);\n      }\n    };\n\n    passport.use(\n      new GoogleStrategy(\n        {\n          clientID: process.env.GOOGLE_CLIENT_ID,\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n          callbackURL: `https://${process.env.REPLIT_DOMAINS!.split(\",\")[0]}/api/callback/google`,\n          scope: [\"email\", \"profile\"],\n        },\n        googleVerify\n      )\n    );\n  }\n\n  // GitHub OAuth Strategy (if credentials are provided)\n  if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n    const githubVerify: any = async (\n      accessToken: string,\n      refreshToken: string,\n      profile: any,\n      done: any\n    ) => {\n      try {\n        const user = {\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          expires_at: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 days\n          claims: {\n            sub: `github:${profile.id}`,\n            email: profile.emails?.[0]?.value || profile._json?.email || \"\",\n            first_name: profile.displayName?.split(\" \")[0] || \"\",\n            last_name: profile.displayName?.split(\" \").slice(1).join(\" \") || \"\",\n            profile_image_url: profile.photos?.[0]?.value || profile._json?.avatar_url || \"\",\n          },\n        };\n        \n        await upsertUser(user.claims);\n        done(null, user);\n      } catch (error) {\n        done(error, null);\n      }\n    };\n\n    passport.use(\n      new GitHubStrategy(\n        {\n          clientID: process.env.GITHUB_CLIENT_ID,\n          clientSecret: process.env.GITHUB_CLIENT_SECRET,\n          callbackURL: `https://${process.env.REPLIT_DOMAINS!.split(\",\")[0]}/api/callback/github`,\n          scope: [\"user:email\"],\n        },\n        githubVerify\n      )\n    );\n  }\n\n  // LinkedIn OAuth Strategy (if credentials are provided)\n  if (process.env.LINKEDIN_CLIENT_ID && process.env.LINKEDIN_CLIENT_SECRET) {\n    const linkedInVerify: any = async (\n      accessToken: string,\n      refreshToken: string,\n      profile: any,\n      done: any\n    ) => {\n      try {\n        const user = {\n          access_token: accessToken,\n          refresh_token: refreshToken,\n          expires_at: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60), // 30 days\n          claims: {\n            sub: `linkedin:${profile.id}`,\n            email: profile.emails?.[0]?.value || \"\",\n            first_name: profile.name?.givenName || \"\",\n            last_name: profile.name?.familyName || \"\",\n            profile_image_url: profile.photos?.[0]?.value || \"\",\n          },\n        };\n        \n        await upsertUser(user.claims);\n        done(null, user);\n      } catch (error) {\n        done(error, null);\n      }\n    };\n\n    passport.use(\n      new LinkedInStrategy(\n        {\n          clientID: process.env.LINKEDIN_CLIENT_ID,\n          clientSecret: process.env.LINKEDIN_CLIENT_SECRET,\n          callbackURL: `https://${process.env.REPLIT_DOMAINS!.split(\",\")[0]}/api/callback/linkedin`,\n          scope: [\"email\", \"profile\", \"openid\"],\n        },\n        linkedInVerify\n      )\n    );\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    const provider = req.query.provider as string;\n    \n    // For backwards compatibility, fallback to Replit Auth if no direct provider is configured\n    if (!provider || ['google', 'github'].includes(provider)) {\n      passport.authenticate(`replitauth:${req.hostname}`, {\n        prompt: \"login consent\",\n        scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n      })(req, res, next);\n    } else {\n      res.status(400).json({ error: \"Invalid provider\" });\n    }\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  // Google OAuth routes (only if credentials are configured)\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    app.get(\"/api/login/google\", (req, res, next) => {\n      passport.authenticate(\"google\", { scope: [\"email\", \"profile\"] })(req, res, next);\n    });\n\n    app.get(\"/api/callback/google\", (req, res, next) => {\n      passport.authenticate(\"google\", {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/\",\n      })(req, res, next);\n    });\n  }\n\n  // GitHub OAuth routes (only if credentials are configured)\n  if (process.env.GITHUB_CLIENT_ID && process.env.GITHUB_CLIENT_SECRET) {\n    app.get(\"/api/login/github\", (req, res, next) => {\n      passport.authenticate(\"github\", { scope: [\"user:email\"] })(req, res, next);\n    });\n\n    app.get(\"/api/callback/github\", (req, res, next) => {\n      passport.authenticate(\"github\", {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/\",\n      })(req, res, next);\n    });\n  }\n\n  // LinkedIn OAuth routes (only if credentials are configured)\n  if (process.env.LINKEDIN_CLIENT_ID && process.env.LINKEDIN_CLIENT_SECRET) {\n    app.get(\"/api/login/linkedin\", (req, res, next) => {\n      passport.authenticate(\"linkedin\")(req, res, next);\n    });\n\n    app.get(\"/api/callback/linkedin\", (req, res, next) => {\n      passport.authenticate(\"linkedin\", {\n        successReturnToOrRedirect: \"/\",\n        failureRedirect: \"/\",\n      })(req, res, next);\n    });\n  }\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":10723},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/invoice-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CalendarIcon, Save, Download, Send, ArrowLeft } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { LineItemsTable, type LineItem } from \"@/components/line-items-table\";\nimport { InvoicePreview } from \"@/components/invoice-preview\";\nimport { ClientSelector, type Client } from \"@/components/client-selector\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { type CompanySettings } from \"@shared/schema\";\nimport { currencies } from \"@shared/currencies\";\n\nexport default function InvoiceEditor() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: clients = [], isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const { data: settings } = useQuery<CompanySettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const [selectedClient, setSelectedClient] = useState<string>();\n  const [issueDate, setIssueDate] = useState<Date>(new Date());\n  const [dueDate, setDueDate] = useState<Date>(\n    new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)\n  );\n  const [currency, setCurrency] = useState(\"USD\");\n  const [status, setStatus] = useState<\"draft\" | \"sent\" | \"paid\" | \"overdue\">(\"draft\");\n  const [notes, setNotes] = useState(\"Payment is due within 30 days. Thank you for your business!\");\n  const [items, setItems] = useState<LineItem[]>([\n    {\n      id: \"1\",\n      description: \"\",\n      quantity: 1,\n      unitPrice: 0,\n      discount: 0,\n      discountType: \"percentage\",\n      taxRate: 0,\n    },\n  ]);\n\n  const handleAddClient = async (newClient: Omit<Client, \"id\">) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/clients\", newClient);\n      const client = await response.json();\n      await queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      setSelectedClient(client.id);\n      toast({\n        title: \"Client added\",\n        description: \"New client has been successfully added.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add client.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSave = async (saveStatus: \"draft\" | \"sent\" = \"draft\") => {\n    if (!selectedClient) {\n      toast({\n        title: \"Client required\",\n        description: \"Please select a client for this invoice.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const invoiceNumber = `${settings?.invoicePrefix || \"INV\"}-${settings?.nextInvoiceNumber || 1001}`;\n\n    try {\n      const invoiceData = {\n        invoiceNumber,\n        clientId: selectedClient,\n        issueDate: issueDate.toISOString(),\n        dueDate: dueDate.toISOString(),\n        currency,\n        status: saveStatus,\n        notes,\n        items: items.map(item => ({\n          description: item.description,\n          quantity: item.quantity,\n          unitPrice: item.unitPrice.toString(),\n          discount: item.discount.toString(),\n          discountType: item.discountType,\n          taxRate: item.taxRate.toString(),\n        })),\n      };\n\n      await apiRequest(\"POST\", \"/api/invoices\", invoiceData);\n\n      if (settings) {\n        await apiRequest(\"POST\", \"/api/settings\", {\n          ...settings,\n          nextInvoiceNumber: (settings.nextInvoiceNumber || 1001) + 1,\n        });\n      }\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n\n      toast({\n        title: saveStatus === \"draft\" ? \"Draft saved\" : \"Invoice sent\",\n        description: `Invoice ${invoiceNumber} has been ${saveStatus === \"draft\" ? \"saved as draft\" : \"sent to client\"}.`,\n      });\n\n      setLocation(\"/invoices\");\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save invoice.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const selectedClientData = clients.find((c) => c.id === selectedClient);\n  const currencySymbol = currencies.find((c) => c.code === currency)?.symbol || \"$\";\n\n  const previewData = {\n    invoiceNumber: `${settings?.invoicePrefix || \"INV\"}-${settings?.nextInvoiceNumber || 1001}`,\n    issueDate,\n    dueDate,\n    status,\n    template: settings?.template as \"modern\" | \"classic\" | \"minimal\" | undefined,\n    primaryColor: settings?.primaryColor || undefined,\n    company: {\n      name: settings?.companyName || \"Your Company\",\n      email: settings?.email || \"email@company.com\",\n      phone: settings?.phone || \"+1 (555) 000-0000\",\n      address: settings?.address || \"123 Business St, City, State 12345\",\n      logo: settings?.logo || undefined,\n    },\n    client: selectedClientData\n      ? {\n          name: selectedClientData.name,\n          email: selectedClientData.email,\n          address: selectedClientData.address || \"\",\n        }\n      : {\n          name: \"Select a client\",\n          email: \"\",\n          address: \"\",\n        },\n    items: items.map(item => ({\n      description: item.description,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice,\n      discount: item.discount,\n      discountType: item.discountType as \"percentage\" | \"fixed\",\n      taxRate: item.taxRate,\n    })),\n    currency: currencySymbol,\n    notes,\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/invoices\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Create Invoice</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Fill in the details to generate a new invoice\n            </p>\n          </div>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={() => handleSave(\"draft\")} data-testid=\"button-save-draft\">\n            <Save className=\"mr-2 h-4 w-4\" />\n            Save Draft\n          </Button>\n          <Button onClick={() => handleSave(\"sent\")} data-testid=\"button-send-invoice\">\n            <Send className=\"mr-2 h-4 w-4\" />\n            Send Invoice\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Invoice Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"client\">Client</Label>\n                {clientsLoading ? (\n                  <div className=\"text-sm text-muted-foreground\">Loading clients...</div>\n                ) : (\n                  <ClientSelector\n                    clients={clients}\n                    value={selectedClient}\n                    onSelect={setSelectedClient}\n                    onAddClient={handleAddClient}\n                  />\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Issue Date</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={cn(\n                          \"w-full justify-start text-left font-normal\",\n                          !issueDate && \"text-muted-foreground\"\n                        )}\n                        data-testid=\"button-issue-date\"\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {issueDate ? format(issueDate, \"PPP\") : \"Pick a date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={issueDate}\n                        onSelect={(date) => date && setIssueDate(date)}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Due Date</Label>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        className={cn(\n                          \"w-full justify-start text-left font-normal\",\n                          !dueDate && \"text-muted-foreground\"\n                        )}\n                        data-testid=\"button-due-date\"\n                      >\n                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                        {dueDate ? format(dueDate, \"PPP\") : \"Pick a date\"}\n                      </Button>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\">\n                      <Calendar\n                        mode=\"single\"\n                        selected={dueDate}\n                        onSelect={(date) => date && setDueDate(date)}\n                      />\n                    </PopoverContent>\n                  </Popover>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"currency\">Currency</Label>\n                <Select value={currency} onValueChange={setCurrency}>\n                  <SelectTrigger id=\"currency\" data-testid=\"select-currency\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"max-h-[300px]\">\n                    {currencies.map((c) => (\n                      <SelectItem key={c.code} value={c.code}>\n                        {c.code} - {c.name} ({c.symbol})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Line Items</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <LineItemsTable\n                items={items}\n                currency={currencySymbol}\n                onChange={setItems}\n              />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Notes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                placeholder=\"Add any notes or payment terms...\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                rows={4}\n                data-testid=\"input-notes\"\n              />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"lg:col-span-3\">\n          <div className=\"sticky top-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold\">Preview</h2>\n                <Select defaultValue=\"modern\">\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-template\">\n                    <SelectValue placeholder=\"Template\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"modern\">Modern</SelectItem>\n                    <SelectItem value=\"classic\">Classic</SelectItem>\n                    <SelectItem value=\"minimal\">Minimal</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <InvoicePreview data={previewData} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12570},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, DollarSign, Users, Settings } from \"lucide-react\";\nimport { SiGoogle, SiGithub, SiLinkedin } from \"react-icons/si\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-background to-muted/30\">\n      {/* Hero Section */}\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"flex flex-col items-center text-center space-y-8 max-w-4xl mx-auto\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className=\"h-16 w-16 rounded-xl bg-primary flex items-center justify-center\">\n              <FileText className=\"h-8 w-8 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-5xl font-bold tracking-tight\">\n              Invoice Pro\n            </h1>\n          </div>\n          \n          <p className=\"text-2xl text-muted-foreground max-w-2xl\">\n            Professional invoice generation made simple. Create beautiful invoices with multi-currency support, tax calculations, and PDF export.\n          </p>\n\n          <div className=\"flex flex-col items-center gap-3 mt-8\">\n            <p className=\"text-sm text-muted-foreground mb-2\">Sign in with your preferred account</p>\n            <div className=\"flex flex-wrap gap-3 justify-center\">\n              <Button\n                size=\"lg\"\n                onClick={() => window.location.href = \"/api/login/google\"}\n                data-testid=\"button-login-google\"\n                className=\"gap-2\"\n              >\n                <SiGoogle className=\"h-5 w-5\" />\n                Google\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                onClick={() => window.location.href = \"/api/login/github\"}\n                data-testid=\"button-login-github\"\n                className=\"gap-2\"\n              >\n                <SiGithub className=\"h-5 w-5\" />\n                GitHub\n              </Button>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                onClick={() => window.location.href = \"/api/login/linkedin\"}\n                data-testid=\"button-login-linkedin\"\n                className=\"gap-2\"\n              >\n                <SiLinkedin className=\"h-5 w-5\" />\n                LinkedIn\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mt-24\">\n          <Card>\n            <CardHeader>\n              <DollarSign className=\"h-8 w-8 text-primary mb-2\" />\n              <CardTitle>Multi-Currency</CardTitle>\n              <CardDescription>\n                Support for USD, EUR, GBP, JPY and more with proper currency grouping\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <FileText className=\"h-8 w-8 text-primary mb-2\" />\n              <CardTitle>PDF Export</CardTitle>\n              <CardDescription>\n                Download professional PDFs with customizable templates and branding\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <Users className=\"h-8 w-8 text-primary mb-2\" />\n              <CardTitle>Client Management</CardTitle>\n              <CardDescription>\n                Organize clients with contact details and track revenue per client\n              </CardDescription>\n            </CardHeader>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <Settings className=\"h-8 w-8 text-primary mb-2\" />\n              <CardTitle>Customizable</CardTitle>\n              <CardDescription>\n                Add your logo, colors, and company details to match your brand\n              </CardDescription>\n            </CardHeader>\n          </Card>\n        </div>\n\n        {/* Additional Features */}\n        <div className=\"mt-24 max-w-3xl mx-auto\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Everything you need to manage invoices</CardTitle>\n              <CardDescription className=\"text-base mt-4\">\n                Built for professionals who value simplicity and efficiency\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"h-6 w-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <div className=\"h-2 w-2 rounded-full bg-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Tax Calculations</h4>\n                    <p className=\"text-sm text-muted-foreground\">Automatic tax calculations per line item</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"h-6 w-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <div className=\"h-2 w-2 rounded-full bg-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Discounts</h4>\n                    <p className=\"text-sm text-muted-foreground\">Percentage or fixed amount discounts</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"h-6 w-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <div className=\"h-2 w-2 rounded-full bg-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Status Tracking</h4>\n                    <p className=\"text-sm text-muted-foreground\">Draft, sent, paid, and overdue status</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"h-6 w-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <div className=\"h-2 w-2 rounded-full bg-primary\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Dashboard Analytics</h4>\n                    <p className=\"text-sm text-muted-foreground\">Track revenue and pending payments</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6751},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"design_guidelines.md":{"content":"# Invoice Generator - Design Guidelines\n\n## Design Approach: Professional Productivity System\n\n**Selected Framework**: Linear-inspired minimalism meets Stripe's dashboard sophistication\n**Rationale**: Invoice generators are utility-focused productivity tools requiring clarity, professionalism, and efficiency. Drawing from Linear's clean typography and Stripe's data presentation excellence.\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode**:\n- Background: 0 0% 100% (pure white)\n- Surface: 240 5% 96% (subtle gray)\n- Border: 240 6% 90%\n- Text Primary: 240 10% 10%\n- Text Secondary: 240 5% 45%\n- Primary: 220 90% 56% (professional blue)\n- Primary Hover: 220 90% 48%\n- Success: 142 76% 36% (for paid status)\n- Warning: 38 92% 50% (for pending)\n- Danger: 0 84% 60% (for overdue)\n\n**Dark Mode**:\n- Background: 240 10% 8%\n- Surface: 240 8% 12%\n- Border: 240 6% 20%\n- Text Primary: 240 5% 96%\n- Text Secondary: 240 5% 65%\n- Primary: 220 90% 60%\n- Success: 142 70% 45%\n- Warning: 38 90% 55%\n- Danger: 0 80% 65%\n\n### B. Typography\n\n**Font Stack**:\n- Primary: 'Inter', -apple-system, system-ui (UI text, forms, data)\n- Display: 'Cal Sans' or 'Inter' (invoice headers, branding)\n- Monospace: 'JetBrains Mono' (invoice numbers, amounts, codes)\n\n**Type Scale**:\n- Display: text-4xl font-semibold (invoice titles, company name)\n- Heading 1: text-2xl font-semibold (section headers)\n- Heading 2: text-xl font-medium (card titles)\n- Body: text-base (primary content)\n- Small: text-sm (labels, metadata)\n- Tiny: text-xs (captions, timestamps)\n\n### C. Layout System\n\n**Spacing Primitives**: Standardize on Tailwind units of **2, 4, 6, 8, 12, 16**\n- Component padding: p-6 or p-8\n- Section spacing: space-y-6 or space-y-8\n- Card gaps: gap-4 or gap-6\n- Form field spacing: space-y-4\n\n**Container Strategy**:\n- Max width: max-w-7xl for main content\n- Sidebar: 280px fixed width\n- Two-column forms: grid-cols-1 md:grid-cols-2 gap-6\n\n### D. Component Library\n\n**Navigation**:\n- Sidebar navigation with icon + label\n- Active state: subtle background (surface color) + primary text\n- Collapsed state option for more workspace\n- Top bar: breadcrumbs, search, user profile\n\n**Forms & Inputs**:\n- Input fields: h-10 with rounded-lg borders\n- Select dropdowns: native styling with custom arrow icons\n- Date pickers: calendar modal with range selection\n- Currency selectors: dropdown with flag icons + currency codes\n- File upload: drag-and-drop zone with preview\n\n**Data Display**:\n- Invoice preview: Live preview card with template switching\n- Line items table: Editable inline cells, auto-calculation rows\n- Summary cards: Revenue, pending, overdue with trend indicators\n- Client cards: Avatar, company name, outstanding balance\n- Invoice status badges: pill shape with status-specific colors\n\n**Modals & Overlays**:\n- Template selector: Grid of template previews\n- Client selector: Searchable dropdown with recent clients\n- Color picker: Swatches + custom hex input\n- PDF preview: Full-screen modal with download/print actions\n\n**Actions**:\n- Primary buttons: Solid primary color, h-10, rounded-lg\n- Secondary buttons: Outline with border-2\n- Danger actions: Red background for destructive operations\n- Icon buttons: 40x40px touch targets\n\n**Invoice Templates**:\n1. **Classic**: Traditional layout, left-aligned header, itemized table\n2. **Modern**: Two-column layout, bold typography, color accents\n3. **Minimal**: Centered layout, maximum whitespace, subtle borders\n4. **Corporate**: Logo prominence, formal styling, detailed footer\n\n### E. Animations\n\n**Micro-interactions Only**:\n- Button press: scale-95 on active state\n- Hover states: Subtle background color transition (150ms)\n- Loading states: Spinner for async operations\n- Save success: Check mark animation with fade\n- Avoid: Page transitions, scroll animations, decorative effects\n\n---\n\n## Page-Specific Layouts\n\n**Dashboard**:\n- 3-column metric cards (total invoices, revenue, pending)\n- Recent invoices table (5 rows) with quick actions\n- Client list sidebar\n- Quick create FAB in bottom-right\n\n**Invoice Editor**:\n- Split view: Form on left (60%), live preview on right (40%)\n- Sticky preview that scrolls independently\n- Floating action bar: Save draft, Preview, Generate PDF\n\n**Invoice List**:\n- Filterable table: Status, date range, client, amount\n- Bulk actions: Mark paid, send reminders, export\n- Search with invoice number autocomplete\n\n**Settings**:\n- Tabbed interface: Company, Templates, Preferences, Integrations\n- Logo upload with circular crop preview\n- Color customization with live brand preview\n\n---\n\n## Images\n\n**No hero images** - This is a productivity tool focused on functionality.\n\n**Placeholder Images Needed**:\n- Company logo placeholder: Upload zone with dashed border, centered icon\n- Empty states: Illustration for \"No invoices yet\" (simple line art)\n- Template thumbnails: Actual invoice layout screenshots (4 variants)\n\n---\n\n## Accessibility & Standards\n\n- Maintain consistent dark mode across all inputs and tables\n- All interactive elements minimum 44x44px touch targets\n- Form validation: Inline error messages below fields\n- Keyboard navigation: Tab order follows visual hierarchy\n- ARIA labels for icon-only buttons\n- High contrast ratios: 4.5:1 for text, 3:1 for UI components","size_bytes":5271},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/invoice-list-table.tsx":{"content":"import { format } from \"date-fns\";\nimport { MoreVertical, Eye, Download, Send, Trash2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Card } from \"@/components/ui/card\";\n\nexport type InvoiceListItem = {\n  id: string;\n  invoiceNumber: string;\n  clientName: string;\n  issueDate: Date;\n  dueDate: Date;\n  amount: number;\n  status: \"draft\" | \"sent\" | \"paid\" | \"overdue\";\n  currency?: string;\n};\n\ntype InvoiceListTableProps = {\n  invoices: InvoiceListItem[];\n  currency?: string;\n  onView?: (id: string) => void;\n  onDownload?: (id: string) => void;\n  onSend?: (id: string) => void;\n  onDelete?: (id: string) => void;\n};\n\nexport function InvoiceListTable({\n  invoices,\n  currency,\n  onView,\n  onDownload,\n  onSend,\n  onDelete,\n}: InvoiceListTableProps) {\n  const statusColors = {\n    draft: \"bg-muted text-muted-foreground\",\n    sent: \"bg-chart-3 text-white\",\n    paid: \"bg-chart-2 text-white\",\n    overdue: \"bg-destructive text-destructive-foreground\",\n  };\n\n  return (\n    <Card>\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Invoice</TableHead>\n            <TableHead>Client</TableHead>\n            <TableHead>Issue Date</TableHead>\n            <TableHead>Due Date</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Amount</TableHead>\n            <TableHead className=\"w-[50px]\"></TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {invoices.length === 0 ? (\n            <TableRow>\n              <TableCell colSpan={7} className=\"h-24 text-center text-muted-foreground\">\n                No invoices found\n              </TableCell>\n            </TableRow>\n          ) : (\n            invoices.map((invoice) => (\n              <TableRow key={invoice.id} className=\"hover-elevate\">\n                <TableCell className=\"font-mono font-medium\" data-testid={`text-invoice-${invoice.id}`}>\n                  #{invoice.invoiceNumber}\n                </TableCell>\n                <TableCell>{invoice.clientName}</TableCell>\n                <TableCell className=\"text-sm text-muted-foreground\">\n                  {format(invoice.issueDate, \"MMM dd, yyyy\")}\n                </TableCell>\n                <TableCell className=\"text-sm text-muted-foreground\">\n                  {format(invoice.dueDate, \"MMM dd, yyyy\")}\n                </TableCell>\n                <TableCell>\n                  <Badge className={statusColors[invoice.status]} data-testid={`badge-status-${invoice.id}`}>\n                    {invoice.status}\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"text-right font-mono font-medium\">\n                  {invoice.currency ? (\n                    <>\n                      {invoice.currency === \"USD\" ? \"$\" : invoice.currency === \"EUR\" ? \"€\" : invoice.currency === \"GBP\" ? \"£\" : invoice.currency === \"JPY\" ? \"¥\" : invoice.currency}\n                      {invoice.amount.toFixed(2)}\n                    </>\n                  ) : (\n                    <>{currency}{invoice.amount.toFixed(2)}</>\n                  )}\n                </TableCell>\n                <TableCell>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" size=\"icon\" data-testid={`button-menu-${invoice.id}`}>\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuItem onClick={() => onView?.(invoice.id)}>\n                        <Eye className=\"mr-2 h-4 w-4\" />\n                        View\n                      </DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => onDownload?.(invoice.id)}>\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Download PDF\n                      </DropdownMenuItem>\n                      {invoice.status === \"draft\" && (\n                        <DropdownMenuItem onClick={() => onSend?.(invoice.id)}>\n                          <Send className=\"mr-2 h-4 w-4\" />\n                          Send to Client\n                        </DropdownMenuItem>\n                      )}\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem\n                        onClick={() => onDelete?.(invoice.id)}\n                        className=\"text-destructive\"\n                      >\n                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))\n          )}\n        </TableBody>\n      </Table>\n    </Card>\n  );\n}\n","size_bytes":5180},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/examples/InvoicePreview.tsx":{"content":"import { InvoicePreview } from \"../invoice-preview\";\n\nexport default function InvoicePreviewExample() {\n  const data = {\n    invoiceNumber: \"INV-1001\",\n    issueDate: new Date(\"2025-10-01\"),\n    dueDate: new Date(\"2025-10-31\"),\n    status: \"sent\" as const,\n    company: {\n      name: \"Design Studio Inc.\",\n      email: \"hello@designstudio.com\",\n      phone: \"+1 (555) 123-4567\",\n      address: \"123 Creative Ave, San Francisco, CA 94102\",\n    },\n    client: {\n      name: \"Tech Corp\",\n      email: \"accounts@techcorp.com\",\n      address: \"456 Business Blvd, New York, NY 10001\",\n    },\n    items: [\n      {\n        description: \"Web Development Services\",\n        quantity: 40,\n        unitPrice: 85,\n        discount: 10,\n        discountType: \"percentage\" as const,\n        taxRate: 8,\n      },\n      {\n        description: \"UI/UX Design Consultation\",\n        quantity: 8,\n        unitPrice: 120,\n        discount: 0,\n        discountType: \"percentage\" as const,\n        taxRate: 8,\n      },\n    ],\n    currency: \"$\",\n    notes: \"Payment is due within 30 days. Thank you for your business!\",\n  };\n\n  return (\n    <div className=\"p-6 bg-background\">\n      <InvoicePreview data={data} />\n    </div>\n  );\n}\n","size_bytes":1207},"client/src/components/client-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Check, ChevronsUpDown, Plus } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport type Client = {\n  id: string;\n  name: string;\n  email: string;\n  address: string;\n};\n\ntype ClientSelectorProps = {\n  clients: Client[];\n  value?: string;\n  onSelect: (clientId: string) => void;\n  onAddClient?: (client: Omit<Client, \"id\">) => void;\n};\n\nexport function ClientSelector({\n  clients,\n  value,\n  onSelect,\n  onAddClient,\n}: ClientSelectorProps) {\n  const [open, setOpen] = useState(false);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [newClient, setNewClient] = useState({\n    name: \"\",\n    email: \"\",\n    address: \"\",\n  });\n\n  const selectedClient = clients.find((client) => client.id === value);\n\n  const handleAddClient = () => {\n    if (onAddClient && newClient.name && newClient.email) {\n      onAddClient(newClient);\n      setNewClient({ name: \"\", email: \"\", address: \"\" });\n      setDialogOpen(false);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"flex-1 justify-between\"\n            data-testid=\"button-select-client\"\n          >\n            {selectedClient ? selectedClient.name : \"Select client...\"}\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[400px] p-0\">\n          <Command>\n            <CommandInput placeholder=\"Search clients...\" />\n            <CommandList>\n              <CommandEmpty>No client found.</CommandEmpty>\n              <CommandGroup>\n                {clients.map((client) => (\n                  <CommandItem\n                    key={client.id}\n                    value={client.name}\n                    onSelect={() => {\n                      onSelect(client.id);\n                      setOpen(false);\n                    }}\n                    data-testid={`option-client-${client.id}`}\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === client.id ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{client.name}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {client.email}\n                      </div>\n                    </div>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogTrigger asChild>\n          <Button variant=\"outline\" size=\"icon\" data-testid=\"button-add-client\">\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </DialogTrigger>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Client</DialogTitle>\n            <DialogDescription>\n              Create a new client to add to your invoices.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Client Name</Label>\n              <Input\n                id=\"name\"\n                placeholder=\"Acme Corporation\"\n                value={newClient.name}\n                onChange={(e) =>\n                  setNewClient({ ...newClient, name: e.target.value })\n                }\n                data-testid=\"input-client-name\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"contact@acme.com\"\n                value={newClient.email}\n                onChange={(e) =>\n                  setNewClient({ ...newClient, email: e.target.value })\n                }\n                data-testid=\"input-client-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                placeholder=\"123 Main St, City, State 12345\"\n                value={newClient.address}\n                onChange={(e) =>\n                  setNewClient({ ...newClient, address: e.target.value })\n                }\n                data-testid=\"input-client-address\"\n              />\n            </div>\n            <Button onClick={handleAddClient} className=\"w-full\" data-testid=\"button-save-client\">\n              Add Client\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":5519},"client/src/pages/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Filter, Plus } from \"lucide-react\";\nimport { InvoiceListTable, type InvoiceListItem } from \"@/components/invoice-list-table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { generateInvoicePDF } from \"@/lib/pdf-generator\";\nimport { type CompanySettings } from \"@shared/schema\";\n\ntype Invoice = {\n  id: string;\n  invoiceNumber: string;\n  clientId: string;\n  issueDate: string;\n  dueDate: string;\n  status: string;\n  currency: string;\n  notes?: string | null;\n  items: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: string;\n    discount: string;\n    discountType: string;\n    taxRate: string;\n  }>;\n};\n\ntype Client = {\n  id: string;\n  name: string;\n  email: string;\n  address?: string | null;\n};\n\nexport default function Invoices() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const { data: invoices = [], isLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const calculateInvoiceTotal = (invoice: Invoice) => {\n    return invoice.items.reduce((sum, item) => {\n      const subtotal = item.quantity * parseFloat(item.unitPrice);\n      let discountAmount = 0;\n      if (item.discountType === \"percentage\") {\n        discountAmount = (subtotal * parseFloat(item.discount)) / 100;\n      } else {\n        discountAmount = parseFloat(item.discount);\n      }\n      const afterDiscount = subtotal - discountAmount;\n      const taxAmount = (afterDiscount * parseFloat(item.taxRate)) / 100;\n      return sum + afterDiscount + taxAmount;\n    }, 0);\n  };\n\n  const getClientName = (clientId: string) => {\n    const client = clients.find(c => c.id === clientId);\n    return client?.name || \"Unknown Client\";\n  };\n\n  const invoiceListItems: InvoiceListItem[] = invoices.map((invoice) => ({\n    id: invoice.id,\n    invoiceNumber: invoice.invoiceNumber,\n    clientName: getClientName(invoice.clientId),\n    issueDate: new Date(invoice.issueDate),\n    dueDate: new Date(invoice.dueDate),\n    amount: calculateInvoiceTotal(invoice),\n    status: invoice.status as any,\n    currency: invoice.currency,\n  }));\n\n  const filteredInvoices = invoiceListItems.filter((invoice) => {\n    const matchesSearch =\n      invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      invoice.clientName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus =\n      statusFilter === \"all\" || invoice.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleDelete = async (id: string) => {\n    try {\n      await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Invoice deleted\",\n        description: \"The invoice has been successfully deleted.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete invoice.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSend = async (id: string) => {\n    try {\n      await apiRequest(\"PATCH\", `/api/invoices/${id}`, { status: \"sent\" });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Invoice sent\",\n        description: \"The invoice has been sent to the client.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send invoice.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDownload = async (id: string) => {\n    const invoice = invoices.find(inv => inv.id === id);\n    if (!invoice) return;\n\n    const client = clients.find(c => c.id === invoice.clientId);\n    const settings = await queryClient.fetchQuery<CompanySettings>({ queryKey: [\"/api/settings\"] });\n\n    const pdfData = {\n      invoiceNumber: invoice.invoiceNumber,\n      issueDate: new Date(invoice.issueDate),\n      dueDate: new Date(invoice.dueDate),\n      status: invoice.status,\n      template: settings?.template || \"modern\",\n      primaryColor: settings?.primaryColor || \"#3B82F6\",\n      company: {\n        name: settings?.companyName || \"Your Company\",\n        email: settings?.email || \"email@company.com\",\n        phone: settings?.phone || \"+1 (555) 000-0000\",\n        address: settings?.address || \"123 Business St, City, State 12345\",\n        logo: settings?.logo || undefined,\n      },\n      client: {\n        name: client?.name || \"Unknown Client\",\n        email: client?.email || \"\",\n        address: client?.address || \"\",\n      },\n      items: invoice.items.map(item => ({\n        description: item.description,\n        quantity: item.quantity,\n        unitPrice: parseFloat(item.unitPrice),\n        discount: parseFloat(item.discount),\n        discountType: item.discountType as \"percentage\" | \"fixed\",\n        taxRate: parseFloat(item.taxRate),\n      })),\n      currency: invoice.currency === \"USD\" ? \"$\" : invoice.currency,\n      notes: invoice.notes || undefined,\n    };\n\n    generateInvoicePDF(pdfData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Invoices</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage all your invoices in one place\n          </p>\n        </div>\n        <Button onClick={() => setLocation(\"/invoice/new\")} data-testid=\"button-new-invoice\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          New Invoice\n        </Button>\n      </div>\n\n      <div className=\"flex flex-wrap gap-4\">\n        <div className=\"flex-1 min-w-[300px]\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search invoices...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-40\" data-testid=\"select-filter-status\">\n            <Filter className=\"mr-2 h-4 w-4\" />\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"sent\">Sent</SelectItem>\n            <SelectItem value=\"paid\">Paid</SelectItem>\n            <SelectItem value=\"overdue\">Overdue</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {isLoading ? (\n        <div className=\"h-48 flex items-center justify-center text-muted-foreground\">\n          Loading invoices...\n        </div>\n      ) : (\n        <InvoiceListTable\n          invoices={filteredInvoices}\n          onView={(id) => setLocation(`/invoice/${id}`)}\n          onDownload={handleDownload}\n          onSend={handleSend}\n          onDelete={handleDelete}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7647},"client/src/components/invoice-stats.tsx":{"content":"import { FileText, DollarSign, Clock, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ntype StatsCardProps = {\n  title: string;\n  value: string;\n  description: string;\n  icon: React.ReactNode;\n  trend?: { value: number; isPositive: boolean };\n};\n\nfunction StatsCard({ title, value, description, icon, trend }: StatsCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <div className=\"text-muted-foreground\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-semibold font-mono\" data-testid={`stat-${title.toLowerCase().replace(/\\s+/g, '-')}`}>{value}</div>\n        <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        {trend && (\n          <div\n            className={`text-xs mt-2 ${\n              trend.isPositive ? \"text-chart-2\" : \"text-destructive\"\n            }`}\n          >\n            {trend.isPositive ? \"+\" : \"\"}\n            {trend.value}% from last month\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ntype InvoiceStatsProps = {\n  stats: {\n    totalInvoices: number;\n    totalRevenue: number;\n    pending: number;\n    paid: number;\n    currency?: string;\n  };\n};\n\nexport function InvoiceStats({ stats }: InvoiceStatsProps) {\n  const currency = stats.currency || \"$\";\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <StatsCard\n        title=\"Total Invoices\"\n        value={stats.totalInvoices.toString()}\n        description=\"All time invoices\"\n        icon={<FileText className=\"h-4 w-4\" />}\n        trend={{ value: 12, isPositive: true }}\n      />\n      <StatsCard\n        title=\"Total Revenue\"\n        value={`${currency}${stats.totalRevenue.toLocaleString()}`}\n        description=\"All time earnings\"\n        icon={<DollarSign className=\"h-4 w-4\" />}\n        trend={{ value: 8, isPositive: true }}\n      />\n      <StatsCard\n        title=\"Pending Payment\"\n        value={`${currency}${stats.pending.toLocaleString()}`}\n        description=\"Awaiting payment\"\n        icon={<Clock className=\"h-4 w-4\" />}\n      />\n      <StatsCard\n        title=\"Paid Invoices\"\n        value={`${currency}${stats.paid.toLocaleString()}`}\n        description=\"Completed this month\"\n        icon={<CheckCircle className=\"h-4 w-4\" />}\n        trend={{ value: 15, isPositive: true }}\n      />\n    </div>\n  );\n}\n","size_bytes":2539},"replit.md":{"content":"# Invoice Generator\n\n## Overview\n\nA professional invoice generation web application built with React, Express, and PostgreSQL. The system enables users to create, manage, and export invoices with multi-currency support, customizable branding, and PDF generation capabilities. Features Google authentication via Replit Auth for secure user access. The application follows a Linear-inspired minimalist design approach with Stripe's dashboard sophistication, emphasizing clarity and professionalism.\n\n**Latest Updates (October 15, 2025)**\n- ✅ **Multi-Provider OAuth**: Direct authentication with Google, GitHub, and LinkedIn (not via Replit Auth)\n- ✅ **Google OAuth**: passport-google-oauth20 with email/profile scopes\n- ✅ **GitHub OAuth**: passport-github2 with user:email scope\n- ✅ **LinkedIn OAuth**: passport-linkedin-oauth2 with OpenID Connect (openid, profile, email scopes)\n- ✅ **PostgreSQL Database**: Migrated from in-memory to PostgreSQL with Drizzle ORM for persistent storage\n- ✅ **User Data Isolation**: All clients, invoices, and settings are user-specific with foreign key constraints\n- ✅ **Session Management**: PostgreSQL-backed sessions with 30-day expiration\n- ✅ **Landing Page**: Professional landing page with three OAuth provider buttons\n- ✅ **Protected Routes**: All API endpoints require authentication with isAuthenticated middleware\n- ✅ **International Banking Support**: Generic banking fields (Bank Name, Account Number, Routing/Sort Code, SWIFT Code) supporting worldwide banking systems\n- ✅ **Comprehensive Currency Support**: 170+ currencies from all major countries and regions worldwide\n- ✅ **Logo Display**: Company logo displays on invoice preview and PDF exports (PNG/JPEG support)\n- ✅ **Invoice Templates**: Three distinct template styles (Modern, Classic, Minimal) for both preview and PDF generation\n- ✅ **Type Safety**: End-to-end type safety using CompanySettings from shared schema throughout template flow\n- ✅ Enhanced currency selector with currency names for better user experience\n- ✅ PDF generation with logo embedding and format auto-detection\n- ✅ Professional dashboard with real-time metrics\n- ✅ Settings page with template persistence, logo upload, color picker, and international banking information\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build Tools**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server for fast HMR and optimized production builds\n- Wouter for lightweight client-side routing instead of React Router\n\n**UI Component System**\n- Radix UI primitives for accessible, unstyled components (dialogs, dropdowns, tooltips, etc.)\n- shadcn/ui design system with \"new-york\" style variant\n- Tailwind CSS for utility-first styling with custom CSS variables for theming\n- Class Variance Authority (CVA) for component variant management\n\n**State Management & Data Fetching**\n- TanStack Query (React Query) for server state management, caching, and data synchronization\n- Custom query client configured with optimistic UI patterns\n- Local component state with React hooks for UI-specific state\n\n**Design System**\n- Custom color palette supporting light/dark modes via CSS variables\n- Typography scale using Inter (UI text), JetBrains Mono (invoice numbers/amounts)\n- Professional color scheme: blue primary (#3B82F6), semantic status colors (green/paid, amber/pending, red/overdue)\n- Consistent spacing, border radius, and elevation system\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js with TypeScript for type-safe API development\n- ESM module system throughout the stack\n- Custom middleware for request logging and error handling\n\n**API Design Pattern**\n- RESTful API structure with resource-based endpoints\n- CRUD operations for clients, invoices, line items, and company settings\n- Zod schema validation for request/response data integrity\n- Standardized error responses with appropriate HTTP status codes\n\n**Storage Layer**\n- Abstract IStorage interface defining data access contracts\n- DatabaseStorage implementation using PostgreSQL via Drizzle ORM\n- All data operations scoped by userId for multi-tenant isolation\n- UUID-based primary keys for distributed system compatibility\n\n**Authentication System**\n- Direct OAuth integration with Google, GitHub, and LinkedIn\n- passport-google-oauth20 for Google authentication\n- passport-github2 for GitHub authentication  \n- passport-linkedin-oauth2 for LinkedIn authentication with OpenID Connect\n- PostgreSQL-backed session storage with connect-pg-simple\n- 30-day session expiration with automatic validation\n- Middleware-based route protection (isAuthenticated)\n- User IDs prefixed by provider (google:, github:, linkedin:)\n\n**Database Schema (Drizzle ORM)**\n- `users` table: User profiles from OAuth (id, email, firstName, lastName, profileImageUrl)\n- `sessions` table: Session storage for authentication state\n- `clients` table: Customer information with contact details and tax ID (linked to userId)\n- `invoices` table: Invoice metadata including status, dates, currency, tax/discount (linked to userId and clientId)\n- `line_items` table: Individual invoice items with quantity, pricing (linked to invoiceId)\n- `company_settings` table: Per-user branding, contact info, and invoice numbering (linked to userId)\n\n**Foreign Key Constraints**\n- `clients.userId` → `users.id` (cascade delete)\n- `invoices.userId` → `users.id` (cascade delete)\n- `invoices.clientId` → `clients.id` (restrict delete to prevent orphaned invoices)\n- `line_items.invoiceId` → `invoices.id` (cascade delete)\n- `company_settings.userId` → `users.id` (cascade delete, unique per user)\n\n### External Dependencies\n\n**Database & ORM**\n- PostgreSQL as the production database (Neon serverless driver)\n- Drizzle ORM for type-safe database queries and migrations\n- Drizzle-Zod for automatic schema validation from database schema\n- Connection pooling via Neon serverless for scalability\n\n**PDF Generation**\n- jsPDF library for client-side PDF generation\n- Custom PDF template matching invoice preview design\n- Supports multi-page invoices with automatic pagination\n\n**Date & Number Formatting**\n- date-fns for consistent date formatting and manipulation\n- Decimal precision handling for financial calculations (10,2 for amounts, 5,2 for rates)\n\n**Development Tools**\n- tsx for TypeScript execution in development\n- esbuild for production server bundling\n- Replit-specific plugins for development environment integration (cartographer, dev-banner, runtime-error-modal)\n\n**Authentication Dependencies**\n- passport for authentication middleware\n- openid-client for OAuth/OpenID Connect protocol\n- connect-pg-simple for PostgreSQL-backed session storage\n- memoizee for OIDC configuration caching\n\n### Key Architectural Decisions\n\n**Monorepo Structure**\n- Shared schema definitions between client and server via `@shared` path alias\n- Single TypeScript configuration with path mapping for clean imports\n- Unified build process with separate client/server outputs\n\n**Type Safety**\n- End-to-end TypeScript with strict mode enabled\n- Zod schemas as single source of truth for validation\n- Drizzle-Zod integration for automatic type inference from database\n\n**Separation of Concerns**\n- Storage abstraction with user-scoped data access\n- Component composition with shadcn/ui for maintainable UI code\n- API client abstraction with centralized error handling\n- Authentication state management via useAuth hook\n\n**Security Architecture**\n- All API routes protected with isAuthenticated middleware\n- JWT-based authentication with automatic token refresh\n- Session cookies with httpOnly and secure flags\n- User data isolation enforced at database level with foreign keys\n- CSRF protection via session management\n\n**Performance Optimizations**\n- React Query for intelligent caching and background refetching\n- Vite's code splitting and lazy loading capabilities\n- CSS-in-JS avoided in favor of Tailwind for better performance\n\n**Responsive Design**\n- Mobile-first approach with custom breakpoint hooks\n- Sidebar collapses to sheet on mobile devices\n- Touch-optimized interactions for mobile invoice editing","size_bytes":8289},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { InvoiceStats } from \"@/components/invoice-stats\";\nimport { InvoiceListTable, type InvoiceListItem } from \"@/components/invoice-list-table\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { generateInvoicePDF } from \"@/lib/pdf-generator\";\nimport { type CompanySettings } from \"@shared/schema\";\n\ntype Invoice = {\n  id: string;\n  invoiceNumber: string;\n  clientId: string;\n  issueDate: string;\n  dueDate: string;\n  currency: string;\n  status: string;\n  notes?: string | null;\n  items: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: string;\n    discount: string;\n    discountType: string;\n    taxRate: string;\n  }>;\n};\n\ntype Client = {\n  id: string;\n  name: string;\n  email: string;\n  address?: string | null;\n};\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: invoices = [], isLoading: invoicesLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n  });\n\n  const calculateInvoiceTotal = (invoice: Invoice) => {\n    return invoice.items.reduce((sum, item) => {\n      const subtotal = item.quantity * parseFloat(item.unitPrice);\n      let discountAmount = 0;\n      if (item.discountType === \"percentage\") {\n        discountAmount = (subtotal * parseFloat(item.discount)) / 100;\n      } else {\n        discountAmount = parseFloat(item.discount);\n      }\n      const afterDiscount = subtotal - discountAmount;\n      const taxAmount = (afterDiscount * parseFloat(item.taxRate)) / 100;\n      return sum + afterDiscount + taxAmount;\n    }, 0);\n  };\n\n  const getClientName = (clientId: string) => {\n    const client = clients.find(c => c.id === clientId);\n    return client?.name || \"Unknown Client\";\n  };\n\n  const invoiceListItems: InvoiceListItem[] = invoices.slice(0, 5).map((invoice) => ({\n    id: invoice.id,\n    invoiceNumber: invoice.invoiceNumber,\n    clientName: getClientName(invoice.clientId),\n    issueDate: new Date(invoice.issueDate),\n    dueDate: new Date(invoice.dueDate),\n    amount: calculateInvoiceTotal(invoice),\n    status: invoice.status as any,\n    currency: invoice.currency,\n  }));\n\n  const groupByCurrency = (invoiceList: Invoice[]) => {\n    return invoiceList.reduce((acc, inv) => {\n      const currency = inv.currency || \"USD\";\n      const total = calculateInvoiceTotal(inv);\n      acc[currency] = (acc[currency] || 0) + total;\n      return acc;\n    }, {} as Record<string, number>);\n  };\n\n  const paidInvoices = invoices.filter(inv => inv.status === \"paid\");\n  const pendingInvoices = invoices.filter(inv => inv.status === \"sent\" || inv.status === \"overdue\");\n  const paidThisMonthInvoices = invoices.filter(inv => {\n    const invoiceDate = new Date(inv.issueDate);\n    const now = new Date();\n    return inv.status === \"paid\" && \n      invoiceDate.getMonth() === now.getMonth() &&\n      invoiceDate.getFullYear() === now.getFullYear();\n  });\n\n  const totalRevenueByCurrency = groupByCurrency(paidInvoices);\n  const pendingAmountByCurrency = groupByCurrency(pendingInvoices);\n  const paidThisMonthByCurrency = groupByCurrency(paidThisMonthInvoices);\n\n  const primaryCurrency = Object.keys(totalRevenueByCurrency)[0] || \"USD\";\n  const getCurrencySymbol = (code: string) => {\n    const map: Record<string, string> = { USD: \"$\", EUR: \"€\", GBP: \"£\", JPY: \"¥\" };\n    return map[code] || code;\n  };\n\n  const formatMultiCurrency = (amounts: Record<string, number>) => {\n    return Object.entries(amounts)\n      .map(([curr, amt]) => `${getCurrencySymbol(curr)}${Math.round(amt).toLocaleString()}`)\n      .join(\" + \") || `${getCurrencySymbol(primaryCurrency)}0`;\n  };\n\n  const stats = {\n    totalInvoices: invoices.length,\n    totalRevenue: Math.round(totalRevenueByCurrency[primaryCurrency] || 0),\n    pending: Math.round(pendingAmountByCurrency[primaryCurrency] || 0),\n    paid: Math.round(paidThisMonthByCurrency[primaryCurrency] || 0),\n    currency: getCurrencySymbol(primaryCurrency),\n  };\n\n  const handleDelete = async (id: string) => {\n    try {\n      await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Invoice deleted\",\n        description: \"The invoice has been successfully deleted.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete invoice.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDownload = async (id: string) => {\n    const invoice = invoices.find(inv => inv.id === id);\n    if (!invoice) return;\n\n    const client = clients.find(c => c.id === invoice.clientId);\n    const settings = await queryClient.fetchQuery<CompanySettings>({ queryKey: [\"/api/settings\"] });\n\n    const pdfData = {\n      invoiceNumber: invoice.invoiceNumber,\n      issueDate: new Date(invoice.issueDate),\n      dueDate: new Date(invoice.dueDate),\n      status: invoice.status,\n      company: {\n        name: settings?.companyName || \"Your Company\",\n        email: settings?.email || \"email@company.com\",\n        phone: settings?.phone || \"+1 (555) 000-0000\",\n        address: settings?.address || \"123 Business St, City, State 12345\",\n        logo: settings?.logo || undefined,\n      },\n      client: {\n        name: client?.name || \"Unknown Client\",\n        email: client?.email || \"\",\n        address: client?.address || \"\",\n      },\n      items: invoice.items.map(item => ({\n        description: item.description,\n        quantity: item.quantity,\n        unitPrice: parseFloat(item.unitPrice),\n        discount: parseFloat(item.discount),\n        discountType: item.discountType as \"percentage\" | \"fixed\",\n        taxRate: parseFloat(item.taxRate),\n      })),\n      currency: invoice.currency === \"USD\" ? \"$\" : invoice.currency,\n      notes: invoice.notes || undefined,\n    };\n\n    generateInvoicePDF(pdfData);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Overview of your invoicing activity\n          </p>\n        </div>\n        <Button onClick={() => setLocation(\"/invoice/new\")} data-testid=\"button-create-invoice\">\n          <Plus className=\"mr-2 h-4 w-4\" />\n          New Invoice\n        </Button>\n      </div>\n\n      <InvoiceStats stats={stats} />\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Invoices</CardTitle>\n          <CardDescription>Your latest billing activity</CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {invoicesLoading ? (\n            <div className=\"h-48 flex items-center justify-center text-muted-foreground\">\n              Loading invoices...\n            </div>\n          ) : (\n            <InvoiceListTable\n              invoices={invoiceListItems}\n              onView={(id) => setLocation(`/invoice/${id}`)}\n              onDownload={handleDownload}\n              onSend={(id) => console.log(\"Send invoice\", id)}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7583},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"-apple-system\", \"system-ui\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"JetBrains Mono\", \"Menlo\", \"monospace\"],\n      },\n      minHeight: {\n        '8': '2rem',\n        '9': '2.25rem',\n        '10': '2.5rem',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4199},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"invoice-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1363},"client/src/components/examples/LineItemsTable.tsx":{"content":"import { useState } from \"react\";\nimport { LineItemsTable, type LineItem } from \"../line-items-table\";\n\nexport default function LineItemsTableExample() {\n  const [items, setItems] = useState<LineItem[]>([\n    {\n      id: \"1\",\n      description: \"Web Development Services\",\n      quantity: 40,\n      unitPrice: 85,\n      discount: 10,\n      discountType: \"percentage\",\n      taxRate: 8,\n    },\n    {\n      id: \"2\",\n      description: \"UI/UX Design Consultation\",\n      quantity: 8,\n      unitPrice: 120,\n      discount: 0,\n      discountType: \"percentage\",\n      taxRate: 8,\n    },\n  ]);\n\n  return (\n    <div className=\"p-6 max-w-6xl\">\n      <LineItemsTable items={items} currency=\"$\" onChange={setItems} />\n    </div>\n  );\n}\n","size_bytes":725},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/line-items-table.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport type LineItem = {\n  id: string;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  discount: number;\n  discountType: \"percentage\" | \"fixed\";\n  taxRate: number;\n};\n\ntype LineItemsTableProps = {\n  items: LineItem[];\n  currency?: string;\n  onChange: (items: LineItem[]) => void;\n};\n\nexport function LineItemsTable({ items, currency = \"$\", onChange }: LineItemsTableProps) {\n  const addItem = () => {\n    onChange([\n      ...items,\n      {\n        id: Math.random().toString(36).substr(2, 9),\n        description: \"\",\n        quantity: 1,\n        unitPrice: 0,\n        discount: 0,\n        discountType: \"percentage\",\n        taxRate: 0,\n      },\n    ]);\n  };\n\n  const removeItem = (id: string) => {\n    onChange(items.filter((item) => item.id !== id));\n  };\n\n  const updateItem = (id: string, field: keyof LineItem, value: any) => {\n    onChange(\n      items.map((item) =>\n        item.id === id ? { ...item, [field]: value } : item\n      )\n    );\n  };\n\n  const calculateItemTotal = (item: LineItem) => {\n    const subtotal = item.quantity * item.unitPrice;\n    let discountAmount = 0;\n    if (item.discountType === \"percentage\") {\n      discountAmount = (subtotal * item.discount) / 100;\n    } else {\n      discountAmount = item.discount;\n    }\n    const afterDiscount = subtotal - discountAmount;\n    const taxAmount = (afterDiscount * item.taxRate) / 100;\n    return afterDiscount + taxAmount;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"rounded-lg border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"w-[40%]\">Description</TableHead>\n              <TableHead className=\"w-[10%]\">Qty</TableHead>\n              <TableHead className=\"w-[12%]\">Price</TableHead>\n              <TableHead className=\"w-[12%]\">Discount</TableHead>\n              <TableHead className=\"w-[10%]\">Tax %</TableHead>\n              <TableHead className=\"w-[12%] text-right\">Total</TableHead>\n              <TableHead className=\"w-[4%]\"></TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {items.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={7} className=\"h-24 text-center text-muted-foreground\">\n                  No items added yet\n                </TableCell>\n              </TableRow>\n            ) : (\n              items.map((item) => (\n                <TableRow key={item.id}>\n                  <TableCell>\n                    <Input\n                      placeholder=\"Item description\"\n                      value={item.description}\n                      onChange={(e) =>\n                        updateItem(item.id, \"description\", e.target.value)\n                      }\n                      data-testid={`input-description-${item.id}`}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      value={item.quantity}\n                      onChange={(e) =>\n                        updateItem(item.id, \"quantity\", parseInt(e.target.value) || 0)\n                      }\n                      data-testid={`input-quantity-${item.id}`}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={item.unitPrice}\n                      onChange={(e) =>\n                        updateItem(item.id, \"unitPrice\", parseFloat(e.target.value) || 0)\n                      }\n                      data-testid={`input-unit-price-${item.id}`}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-1\">\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={item.discount}\n                        onChange={(e) =>\n                          updateItem(item.id, \"discount\", parseFloat(e.target.value) || 0)\n                        }\n                        className=\"w-16\"\n                        data-testid={`input-discount-${item.id}`}\n                      />\n                      <Select\n                        value={item.discountType}\n                        onValueChange={(value) =>\n                          updateItem(item.id, \"discountType\", value)\n                        }\n                      >\n                        <SelectTrigger className=\"w-14\" data-testid={`select-discount-type-${item.id}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"percentage\">%</SelectItem>\n                          <SelectItem value=\"fixed\">{currency}</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.01\"\n                      value={item.taxRate}\n                      onChange={(e) =>\n                        updateItem(item.id, \"taxRate\", parseFloat(e.target.value) || 0)\n                      }\n                      data-testid={`input-tax-${item.id}`}\n                    />\n                  </TableCell>\n                  <TableCell className=\"text-right font-mono\">\n                    {currency}{calculateItemTotal(item).toFixed(2)}\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => removeItem(item.id)}\n                      data-testid={`button-remove-${item.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <Button variant=\"outline\" onClick={addItem} data-testid=\"button-add-item\">\n        <Plus className=\"h-4 w-4 mr-2\" />\n        Add Item\n      </Button>\n    </div>\n  );\n}\n","size_bytes":6821},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/app-sidebar.tsx":{"content":"import { Home, FileText, Users, Settings, Plus } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\n\nconst menuItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Invoices\",\n    url: \"/invoices\",\n    icon: FileText,\n  },\n  {\n    title: \"Clients\",\n    url: \"/clients\",\n    icon: Users,\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-9 w-9 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n            <FileText className=\"h-5 w-5\" />\n          </div>\n          <div>\n            <h2 className=\"text-base font-semibold\">Invoice Pro</h2>\n            <p className=\"text-xs text-muted-foreground\">Professional Billing</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                    data-testid={`link-${item.title.toLowerCase()}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"p-4\">\n        <Button className=\"w-full\" data-testid=\"button-new-invoice\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          New Invoice\n        </Button>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2343},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Upload, FileText, Check } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nimport { type CompanySettings } from \"@shared/schema\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { data: settings, isLoading } = useQuery<CompanySettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const [companyName, setCompanyName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [taxId, setTaxId] = useState(\"\");\n  const [logo, setLogo] = useState<string | null>(null);\n  const [primaryColor, setPrimaryColor] = useState(\"#3B82F6\");\n  const [invoicePrefix, setInvoicePrefix] = useState(\"\");\n  const [nextNumber, setNextNumber] = useState(1001);\n  const [selectedTemplate, setSelectedTemplate] = useState(\"modern\");\n  const [bankName, setBankName] = useState(\"\");\n  const [accountNumber, setAccountNumber] = useState(\"\");\n  const [routingCode, setRoutingCode] = useState(\"\");\n  const [swiftCode, setSwiftCode] = useState(\"\");\n  const [isSaving, setIsSaving] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (settings) {\n      setCompanyName(settings.companyName);\n      setEmail(settings.email);\n      setPhone(settings.phone || \"\");\n      setAddress(settings.address || \"\");\n      setTaxId(settings.taxId || \"\");\n      setLogo(settings.logo);\n      setPrimaryColor(settings.primaryColor || \"#3B82F6\");\n      setInvoicePrefix(settings.invoicePrefix || \"INV\");\n      setNextNumber(settings.nextInvoiceNumber || 1001);\n      setSelectedTemplate(settings.template || \"modern\");\n      setBankName(settings.bankName || \"\");\n      setAccountNumber(settings.accountNumber || \"\");\n      setRoutingCode(settings.routingCode || \"\");\n      setSwiftCode(settings.swiftCode || \"\");\n    }\n  }, [settings]);\n\n  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith(\"image/\")) {\n      toast({\n        title: \"Invalid file\",\n        description: \"Please upload an image file (PNG or JPG).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 2 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload an image smaller than 2MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setLogo(reader.result as string);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const handleSaveCompany = async () => {\n    if (!companyName || !email) {\n      toast({\n        title: \"Missing information\",\n        description: \"Company name and email are required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      await apiRequest(\"POST\", \"/api/settings\", {\n        companyName,\n        email,\n        phone: phone || null,\n        address: address || null,\n        taxId: taxId || null,\n        logo: logo || null,\n        primaryColor,\n        invoicePrefix,\n        nextInvoiceNumber: nextNumber,\n        template: selectedTemplate,\n        bankName: bankName || null,\n        accountNumber: accountNumber || null,\n        routingCode: routingCode || null,\n        swiftCode: swiftCode || null,\n      });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Settings saved\",\n        description: \"Company information has been successfully updated.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleSaveInvoice = async () => {\n    if (!invoicePrefix) {\n      toast({\n        title: \"Missing information\",\n        description: \"Invoice prefix is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      await apiRequest(\"POST\", \"/api/settings\", {\n        companyName,\n        email,\n        phone: phone || null,\n        address: address || null,\n        taxId: taxId || null,\n        logo: logo || null,\n        primaryColor,\n        invoicePrefix,\n        nextInvoiceNumber: nextNumber,\n        template: selectedTemplate,\n        bankName: bankName || null,\n        accountNumber: accountNumber || null,\n        routingCode: routingCode || null,\n        swiftCode: swiftCode || null,\n      });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Settings saved\",\n        description: \"Invoice settings have been successfully updated.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"h-48 flex items-center justify-center text-muted-foreground\">\n        Loading settings...\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-semibold\">Settings</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Manage your company information and preferences\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"company\" data-testid=\"tab-company\">Company Info</TabsTrigger>\n          <TabsTrigger value=\"invoice\" data-testid=\"tab-invoice\">Invoice Settings</TabsTrigger>\n          <TabsTrigger value=\"templates\" data-testid=\"tab-templates\">Templates</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"company\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Company Information</CardTitle>\n              <CardDescription>\n                This information will appear on your invoices\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"logo\">Company Logo</Label>\n                  <div className=\"mt-2 flex items-center gap-4\">\n                    <div className=\"flex h-24 w-24 items-center justify-center rounded-lg border-2 border-dashed border-border bg-muted overflow-hidden\">\n                      {logo ? (\n                        <img src={logo} alt=\"Company logo\" className=\"h-full w-full object-contain\" />\n                      ) : (\n                        <FileText className=\"h-8 w-8 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <div className=\"flex flex-col gap-2\">\n                      <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        onChange={handleLogoUpload}\n                        accept=\"image/png,image/jpeg,image/jpg\"\n                        className=\"hidden\"\n                        data-testid=\"input-logo-file\"\n                      />\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => fileInputRef.current?.click()}\n                        data-testid=\"button-upload-logo\"\n                      >\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Upload Logo\n                      </Button>\n                      {logo && (\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setLogo(null)}\n                          data-testid=\"button-remove-logo\"\n                        >\n                          Remove Logo\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Recommended size: 200x200px. PNG or JPG format. Max 2MB.\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyName\">Company Name</Label>\n                    <Input\n                      id=\"companyName\"\n                      value={companyName}\n                      onChange={(e) => setCompanyName(e.target.value)}\n                      data-testid=\"input-company-name\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      data-testid=\"input-company-email\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={phone}\n                      onChange={(e) => setPhone(e.target.value)}\n                      data-testid=\"input-company-phone\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taxId\">Tax ID (Optional)</Label>\n                    <Input\n                      id=\"taxId\"\n                      placeholder=\"XX-XXXXXXX\"\n                      value={taxId}\n                      onChange={(e) => setTaxId(e.target.value)}\n                      data-testid=\"input-tax-id\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    value={address}\n                    onChange={(e) => setAddress(e.target.value)}\n                    rows={3}\n                    data-testid=\"input-company-address\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"primaryColor\">Brand Color</Label>\n                  <div className=\"flex items-center gap-3\">\n                    <input\n                      type=\"color\"\n                      id=\"primaryColor\"\n                      value={primaryColor}\n                      onChange={(e) => setPrimaryColor(e.target.value)}\n                      className=\"h-10 w-20 rounded-md border border-input cursor-pointer\"\n                      data-testid=\"input-primary-color\"\n                    />\n                    <Input\n                      value={primaryColor}\n                      onChange={(e) => setPrimaryColor(e.target.value)}\n                      placeholder=\"#3B82F6\"\n                      className=\"flex-1\"\n                      data-testid=\"input-color-hex\"\n                    />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    This color will be used for branding elements on your invoices\n                  </p>\n                </div>\n              </div>\n\n              <Button onClick={handleSaveCompany} disabled={isSaving} data-testid=\"button-save-company\">\n                {isSaving ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Information</CardTitle>\n              <CardDescription>\n                Bank account details for payment instructions on invoices\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bankName\">Bank Name</Label>\n                  <Input\n                    id=\"bankName\"\n                    value={bankName}\n                    onChange={(e) => setBankName(e.target.value)}\n                    placeholder=\"e.g., Chase Bank\"\n                    data-testid=\"input-bank-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"accountNumber\">Account Number</Label>\n                  <Input\n                    id=\"accountNumber\"\n                    value={accountNumber}\n                    onChange={(e) => setAccountNumber(e.target.value)}\n                    placeholder=\"e.g., 1234567890\"\n                    data-testid=\"input-account-number\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"routingCode\">Routing/Sort Code</Label>\n                  <Input\n                    id=\"routingCode\"\n                    value={routingCode}\n                    onChange={(e) => setRoutingCode(e.target.value)}\n                    placeholder=\"e.g., IFSC (India), Routing (US), Sort Code (UK)\"\n                    data-testid=\"input-routing-code\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enter your bank routing code: IFSC (India), Routing Number (US), Sort Code (UK), etc.\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"swiftCode\">Swift Code</Label>\n                  <Input\n                    id=\"swiftCode\"\n                    value={swiftCode}\n                    onChange={(e) => setSwiftCode(e.target.value)}\n                    placeholder=\"e.g., JAKAINB\"\n                    data-testid=\"input-swift-code\"\n                  />\n                </div>\n              </div>\n\n              <Button onClick={handleSaveCompany} disabled={isSaving} data-testid=\"button-save-account-info\">\n                {isSaving ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"invoice\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Invoice Configuration</CardTitle>\n              <CardDescription>\n                Customize how your invoices are numbered and formatted\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"invoicePrefix\">Invoice Prefix</Label>\n                  <Input\n                    id=\"invoicePrefix\"\n                    value={invoicePrefix}\n                    onChange={(e) => setInvoicePrefix(e.target.value)}\n                    data-testid=\"input-invoice-prefix\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    This will appear before the invoice number (e.g., INV-1001)\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"nextNumber\">Next Invoice Number</Label>\n                  <Input\n                    id=\"nextNumber\"\n                    type=\"number\"\n                    value={nextNumber}\n                    onChange={(e) => setNextNumber(parseInt(e.target.value) || 1001)}\n                    data-testid=\"input-next-number\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    The next invoice will be numbered {invoicePrefix}-{nextNumber}\n                  </p>\n                </div>\n              </div>\n\n              <Button onClick={handleSaveInvoice} disabled={isSaving} data-testid=\"button-save-invoice-settings\">\n                {isSaving ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"templates\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Invoice Template</CardTitle>\n              <CardDescription>\n                Choose a template design for your invoices\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {[\"modern\", \"classic\", \"minimal\"].map((template) => {\n                  const isSelected = selectedTemplate === template;\n                  return (\n                    <Card \n                      key={template} \n                      className={`hover-elevate cursor-pointer relative ${isSelected ? 'ring-2 ring-primary' : ''}`}\n                      onClick={() => setSelectedTemplate(template)}\n                      data-testid={`card-template-${template}`}\n                    >\n                      {isSelected && (\n                        <div className=\"absolute top-2 right-2 h-6 w-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center\">\n                          <Check className=\"h-4 w-4\" />\n                        </div>\n                      )}\n                      <CardHeader>\n                        <CardTitle className=\"text-lg capitalize\">{template}</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"aspect-[3/4] bg-muted rounded-md flex items-center justify-center border\">\n                          <FileText className=\"h-12 w-12 text-muted-foreground\" />\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-3 text-center\">\n                          {template === \"modern\" && \"Clean and professional design with bold headers\"}\n                          {template === \"classic\" && \"Traditional layout with elegant typography\"}\n                          {template === \"minimal\" && \"Simple and straightforward invoice format\"}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n              <div className=\"mt-6\">\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Selected template: <span className=\"font-medium capitalize\">{selectedTemplate}</span>\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Note: Template selection is saved automatically when you update company or invoice settings.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":19365},"client/src/components/examples/ClientSelector.tsx":{"content":"import { useState } from \"react\";\nimport { ClientSelector, type Client } from \"../client-selector\";\n\nexport default function ClientSelectorExample() {\n  const [clients, setClients] = useState<Client[]>([\n    {\n      id: \"1\",\n      name: \"Tech Corp\",\n      email: \"contact@techcorp.com\",\n      address: \"456 Business Blvd, New York, NY 10001\",\n    },\n    {\n      id: \"2\",\n      name: \"Design Agency\",\n      email: \"hello@designagency.com\",\n      address: \"789 Creative Lane, Los Angeles, CA 90001\",\n    },\n  ]);\n  const [selected, setSelected] = useState<string>();\n\n  const handleAddClient = (newClient: Omit<Client, \"id\">) => {\n    const client: Client = {\n      ...newClient,\n      id: Math.random().toString(36).substr(2, 9),\n    };\n    setClients([...clients, client]);\n    setSelected(client.id);\n  };\n\n  return (\n    <div className=\"p-6 max-w-md\">\n      <ClientSelector\n        clients={clients}\n        value={selected}\n        onSelect={setSelected}\n        onAddClient={handleAddClient}\n      />\n    </div>\n  );\n}\n","size_bytes":1023},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/examples/InvoiceStats.tsx":{"content":"import { InvoiceStats } from \"../invoice-stats\";\n\nexport default function InvoiceStatsExample() {\n  const stats = {\n    totalInvoices: 148,\n    totalRevenue: 89420,\n    pending: 12340,\n    paid: 5680,\n    currency: \"$\",\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <InvoiceStats stats={stats} />\n    </div>\n  );\n}\n","size_bytes":328},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/pdf-generator.ts":{"content":"import jsPDF from \"jspdf\";\n\ntype InvoiceData = {\n  invoiceNumber: string;\n  issueDate: Date;\n  dueDate: Date;\n  status: string;\n  template?: string;\n  primaryColor?: string;\n  company: {\n    name: string;\n    email: string;\n    phone: string;\n    address: string;\n    logo?: string;\n  };\n  client: {\n    name: string;\n    email: string;\n    address: string;\n  };\n  items: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: number;\n    discount: number;\n    discountType: \"percentage\" | \"fixed\";\n    taxRate: number;\n  }>;\n  currency: string;\n  notes?: string;\n};\n\nfunction calculateItemTotal(item: { quantity: number; unitPrice: number; discount: number; discountType: \"percentage\" | \"fixed\"; taxRate: number }) {\n  const subtotal = item.quantity * item.unitPrice;\n  let discountAmount = 0;\n  if (item.discountType === \"percentage\") {\n    discountAmount = (subtotal * item.discount) / 100;\n  } else {\n    discountAmount = item.discount;\n  }\n  const afterDiscount = subtotal - discountAmount;\n  const taxAmount = (afterDiscount * item.taxRate) / 100;\n  return afterDiscount + taxAmount;\n}\n\nfunction hexToRgb(hex: string): { r: number; g: number; b: number } {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : { r: 59, g: 130, b: 246 };\n}\n\nfunction generateModernTemplate(doc: jsPDF, data: InvoiceData, subtotal: number, totalDiscount: number, totalTax: number, total: number) {\n  const primaryRgb = hexToRgb(data.primaryColor || \"#3B82F6\");\n  \n  let logoAdded = false;\n  if (data.company.logo) {\n    try {\n      const format = data.company.logo.includes('data:image/jpeg') || data.company.logo.includes('data:image/jpg') ? 'JPEG' : 'PNG';\n      doc.addImage(data.company.logo, format, 20, 15, 30, 15);\n      logoAdded = true;\n    } catch (error) {\n      console.error('Error adding logo to PDF:', error);\n    }\n  }\n\n  const invoiceTextX = logoAdded ? 55 : 20;\n  doc.setTextColor(primaryRgb.r, primaryRgb.g, primaryRgb.b);\n  doc.setFontSize(28);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text(\"INVOICE\", invoiceTextX, 25);\n\n  doc.setTextColor(0, 0, 0);\n  doc.setFontSize(12);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(`#${data.invoiceNumber}`, invoiceTextX, 33);\n  \n  doc.setFontSize(10);\n  doc.text(`Status: ${data.status.toUpperCase()}`, invoiceTextX, 40);\n\n  doc.setFontSize(11);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text(\"From:\", 20, 60);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(data.company.name, 20, 67);\n  doc.text(data.company.email, 20, 73);\n  doc.text(data.company.phone, 20, 79);\n  \n  const fromAddressLines = doc.splitTextToSize(data.company.address, 80);\n  doc.text(fromAddressLines, 20, 85);\n\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text(\"Bill To:\", 120, 60);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(data.client.name, 120, 67);\n  doc.text(data.client.email, 120, 73);\n  \n  const toAddressLines = doc.splitTextToSize(data.client.address, 80);\n  doc.text(toAddressLines, 120, 79);\n\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text(\"Issue Date:\", 20, 110);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(data.issueDate.toLocaleDateString(), 50, 110);\n\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.text(\"Due Date:\", 120, 110);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(data.dueDate.toLocaleDateString(), 150, 110);\n\n  let yPos = 130;\n  \n  doc.setFillColor(primaryRgb.r, primaryRgb.g, primaryRgb.b);\n  doc.rect(20, yPos, 170, 8, \"F\");\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setFontSize(9);\n  doc.text(\"Description\", 22, yPos + 5);\n  doc.text(\"Qty\", 110, yPos + 5);\n  doc.text(\"Rate\", 130, yPos + 5);\n  doc.text(\"Amount\", 165, yPos + 5);\n  \n  yPos += 12;\n  doc.setTextColor(0, 0, 0);\n  doc.setFont(\"helvetica\", \"normal\");\n  \n  data.items.forEach((item) => {\n    const descLines = doc.splitTextToSize(item.description, 85);\n    doc.text(descLines, 22, yPos);\n    doc.text(item.quantity.toString(), 110, yPos);\n    doc.text(`${data.currency}${item.unitPrice.toFixed(2)}`, 130, yPos);\n    doc.text(`${data.currency}${calculateItemTotal(item).toFixed(2)}`, 165, yPos);\n    yPos += Math.max(descLines.length * 5, 8);\n  });\n\n  yPos += 10;\n  doc.setDrawColor(primaryRgb.r, primaryRgb.g, primaryRgb.b);\n  doc.line(20, yPos, 190, yPos);\n\n  yPos += 10;\n  doc.text(\"Subtotal:\", 140, yPos);\n  doc.text(`${data.currency}${subtotal.toFixed(2)}`, 175, yPos, { align: \"right\" });\n\n  if (totalDiscount > 0) {\n    yPos += 7;\n    doc.text(\"Discount:\", 140, yPos);\n    doc.text(`-${data.currency}${totalDiscount.toFixed(2)}`, 175, yPos, { align: \"right\" });\n  }\n\n  if (totalTax > 0) {\n    yPos += 7;\n    doc.text(\"Tax:\", 140, yPos);\n    doc.text(`${data.currency}${totalTax.toFixed(2)}`, 175, yPos, { align: \"right\" });\n  }\n\n  yPos += 10;\n  doc.setDrawColor(primaryRgb.r, primaryRgb.g, primaryRgb.b);\n  doc.setLineWidth(0.5);\n  doc.line(140, yPos, 190, yPos);\n  \n  yPos += 8;\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setFontSize(12);\n  doc.setTextColor(primaryRgb.r, primaryRgb.g, primaryRgb.b);\n  doc.text(\"Total:\", 140, yPos);\n  doc.text(`${data.currency}${total.toFixed(2)}`, 175, yPos, { align: \"right\" });\n\n  if (data.notes) {\n    yPos += 15;\n    if (yPos > 250) {\n      doc.addPage();\n      yPos = 20;\n    }\n    doc.setTextColor(0, 0, 0);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(10);\n    doc.text(\"Notes:\", 20, yPos);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setFontSize(9);\n    const notesLines = doc.splitTextToSize(data.notes, 170);\n    doc.text(notesLines, 20, yPos + 6);\n  }\n}\n\nfunction generateClassicTemplate(doc: jsPDF, data: InvoiceData, subtotal: number, totalDiscount: number, totalTax: number, total: number) {\n  let logoAdded = false;\n  if (data.company.logo) {\n    try {\n      const format = data.company.logo.includes('data:image/jpeg') || data.company.logo.includes('data:image/jpg') ? 'JPEG' : 'PNG';\n      doc.addImage(data.company.logo, format, 20, 15, 25, 12);\n      logoAdded = true;\n    } catch (error) {\n      console.error('Error adding logo to PDF:', error);\n    }\n  }\n\n  const invoiceTextX = logoAdded ? 50 : 20;\n  doc.setFontSize(22);\n  doc.setFont(\"times\", \"bold\");\n  doc.text(\"INVOICE\", invoiceTextX, 22);\n\n  doc.setFontSize(11);\n  doc.setFont(\"times\", \"normal\");\n  doc.text(`Invoice #${data.invoiceNumber}`, invoiceTextX, 30);\n\n  doc.setDrawColor(100, 100, 100);\n  doc.line(20, 35, 190, 35);\n\n  doc.setFontSize(10);\n  doc.setFont(\"times\", \"bold\");\n  doc.text(\"From:\", 20, 50);\n  doc.setFont(\"times\", \"normal\");\n  doc.text(data.company.name, 20, 56);\n  doc.text(data.company.email, 20, 62);\n  doc.text(data.company.phone, 20, 68);\n  const fromAddressLines = doc.splitTextToSize(data.company.address, 80);\n  doc.text(fromAddressLines, 20, 74);\n\n  doc.setFont(\"times\", \"bold\");\n  doc.text(\"Bill To:\", 120, 50);\n  doc.setFont(\"times\", \"normal\");\n  doc.text(data.client.name, 120, 56);\n  doc.text(data.client.email, 120, 62);\n  const toAddressLines = doc.splitTextToSize(data.client.address, 80);\n  doc.text(toAddressLines, 120, 68);\n\n  doc.setFont(\"times\", \"bold\");\n  doc.text(\"Invoice Date:\", 20, 100);\n  doc.setFont(\"times\", \"normal\");\n  doc.text(data.issueDate.toLocaleDateString(), 55, 100);\n\n  doc.setFont(\"times\", \"bold\");\n  doc.text(\"Due Date:\", 120, 100);\n  doc.setFont(\"times\", \"normal\");\n  doc.text(data.dueDate.toLocaleDateString(), 150, 100);\n\n  doc.setFont(\"times\", \"bold\");\n  doc.text(\"Status:\", 20, 108);\n  doc.setFont(\"times\", \"normal\");\n  doc.text(data.status.toUpperCase(), 40, 108);\n\n  let yPos = 120;\n  \n  doc.setDrawColor(100, 100, 100);\n  doc.line(20, yPos, 190, yPos);\n  yPos += 8;\n  \n  doc.setFont(\"times\", \"bold\");\n  doc.setFontSize(9);\n  doc.text(\"Description\", 22, yPos);\n  doc.text(\"Qty\", 110, yPos);\n  doc.text(\"Rate\", 130, yPos);\n  doc.text(\"Amount\", 165, yPos);\n  \n  yPos += 6;\n  doc.line(20, yPos, 190, yPos);\n  yPos += 6;\n  doc.setFont(\"times\", \"normal\");\n  \n  data.items.forEach((item) => {\n    const descLines = doc.splitTextToSize(item.description, 85);\n    doc.text(descLines, 22, yPos);\n    doc.text(item.quantity.toString(), 110, yPos);\n    doc.text(`${data.currency}${item.unitPrice.toFixed(2)}`, 130, yPos);\n    doc.text(`${data.currency}${calculateItemTotal(item).toFixed(2)}`, 165, yPos);\n    yPos += Math.max(descLines.length * 5, 8);\n  });\n\n  yPos += 5;\n  doc.setDrawColor(100, 100, 100);\n  doc.line(20, yPos, 190, yPos);\n\n  yPos += 10;\n  doc.setFont(\"times\", \"normal\");\n  doc.text(\"Subtotal:\", 140, yPos);\n  doc.text(`${data.currency}${subtotal.toFixed(2)}`, 175, yPos, { align: \"right\" });\n\n  if (totalDiscount > 0) {\n    yPos += 7;\n    doc.text(\"Discount:\", 140, yPos);\n    doc.text(`-${data.currency}${totalDiscount.toFixed(2)}`, 175, yPos, { align: \"right\" });\n  }\n\n  if (totalTax > 0) {\n    yPos += 7;\n    doc.text(\"Tax:\", 140, yPos);\n    doc.text(`${data.currency}${totalTax.toFixed(2)}`, 175, yPos, { align: \"right\" });\n  }\n\n  yPos += 10;\n  doc.setLineWidth(0.5);\n  doc.line(140, yPos, 190, yPos);\n  \n  yPos += 8;\n  doc.setFont(\"times\", \"bold\");\n  doc.setFontSize(11);\n  doc.text(\"Total Due:\", 140, yPos);\n  doc.text(`${data.currency}${total.toFixed(2)}`, 175, yPos, { align: \"right\" });\n\n  if (data.notes) {\n    yPos += 15;\n    if (yPos > 250) {\n      doc.addPage();\n      yPos = 20;\n    }\n    doc.setFont(\"times\", \"bold\");\n    doc.setFontSize(10);\n    doc.text(\"Notes:\", 20, yPos);\n    doc.setFont(\"times\", \"normal\");\n    doc.setFontSize(9);\n    const notesLines = doc.splitTextToSize(data.notes, 170);\n    doc.text(notesLines, 20, yPos + 6);\n  }\n}\n\nfunction generateMinimalTemplate(doc: jsPDF, data: InvoiceData, subtotal: number, totalDiscount: number, totalTax: number, total: number) {\n  let logoAdded = false;\n  if (data.company.logo) {\n    try {\n      const format = data.company.logo.includes('data:image/jpeg') || data.company.logo.includes('data:image/jpg') ? 'JPEG' : 'PNG';\n      doc.addImage(data.company.logo, format, 20, 15, 20, 10);\n      logoAdded = true;\n    } catch (error) {\n      console.error('Error adding logo to PDF:', error);\n    }\n  }\n\n  const invoiceTextX = logoAdded ? 45 : 20;\n  doc.setFontSize(20);\n  doc.setFont(\"helvetica\", \"normal\");\n  doc.text(\"Invoice\", invoiceTextX, 20);\n\n  doc.setFontSize(10);\n  doc.text(`#${data.invoiceNumber}`, invoiceTextX, 28);\n\n  doc.setFontSize(9);\n  doc.text(data.company.name, 20, 45);\n  doc.text(data.company.email, 20, 51);\n  doc.text(data.company.phone, 20, 57);\n  const fromAddressLines = doc.splitTextToSize(data.company.address, 80);\n  doc.text(fromAddressLines, 20, 63);\n\n  doc.text(data.client.name, 120, 45);\n  doc.text(data.client.email, 120, 51);\n  const toAddressLines = doc.splitTextToSize(data.client.address, 80);\n  doc.text(toAddressLines, 120, 57);\n\n  doc.text(`Issued: ${data.issueDate.toLocaleDateString()}`, 20, 85);\n  doc.text(`Due: ${data.dueDate.toLocaleDateString()}`, 120, 85);\n  doc.text(`Status: ${data.status}`, 20, 92);\n\n  let yPos = 105;\n  \n  doc.setFontSize(8);\n  doc.text(\"Description\", 22, yPos);\n  doc.text(\"Qty\", 110, yPos);\n  doc.text(\"Rate\", 130, yPos);\n  doc.text(\"Amount\", 165, yPos);\n  \n  yPos += 8;\n  \n  data.items.forEach((item) => {\n    const descLines = doc.splitTextToSize(item.description, 85);\n    doc.text(descLines, 22, yPos);\n    doc.text(item.quantity.toString(), 110, yPos);\n    doc.text(`${data.currency}${item.unitPrice.toFixed(2)}`, 130, yPos);\n    doc.text(`${data.currency}${calculateItemTotal(item).toFixed(2)}`, 165, yPos);\n    yPos += Math.max(descLines.length * 4, 6);\n  });\n\n  yPos += 10;\n  doc.text(\"Subtotal:\", 140, yPos);\n  doc.text(`${data.currency}${subtotal.toFixed(2)}`, 175, yPos, { align: \"right\" });\n\n  if (totalDiscount > 0) {\n    yPos += 6;\n    doc.text(\"Discount:\", 140, yPos);\n    doc.text(`-${data.currency}${totalDiscount.toFixed(2)}`, 175, yPos, { align: \"right\" });\n  }\n\n  if (totalTax > 0) {\n    yPos += 6;\n    doc.text(\"Tax:\", 140, yPos);\n    doc.text(`${data.currency}${totalTax.toFixed(2)}`, 175, yPos, { align: \"right\" });\n  }\n\n  yPos += 10;\n  doc.setFontSize(10);\n  doc.text(\"Total:\", 140, yPos);\n  doc.text(`${data.currency}${total.toFixed(2)}`, 175, yPos, { align: \"right\" });\n\n  if (data.notes) {\n    yPos += 15;\n    if (yPos > 250) {\n      doc.addPage();\n      yPos = 20;\n    }\n    doc.setFontSize(8);\n    doc.text(\"Notes:\", 20, yPos);\n    const notesLines = doc.splitTextToSize(data.notes, 170);\n    doc.text(notesLines, 20, yPos + 5);\n  }\n}\n\nexport function generateInvoicePDF(data: InvoiceData) {\n  const doc = new jsPDF();\n  \n  const subtotal = data.items.reduce(\n    (sum, item) => sum + item.quantity * item.unitPrice,\n    0\n  );\n  const totalDiscount = data.items.reduce((sum, item) => {\n    const itemSubtotal = item.quantity * item.unitPrice;\n    return (\n      sum +\n      (item.discountType === \"percentage\"\n        ? (itemSubtotal * item.discount) / 100\n        : item.discount)\n    );\n  }, 0);\n  const totalTax = data.items.reduce((sum, item) => {\n    const itemSubtotal = item.quantity * item.unitPrice;\n    const discountAmount =\n      item.discountType === \"percentage\"\n        ? (itemSubtotal * item.discount) / 100\n        : item.discount;\n    return sum + ((itemSubtotal - discountAmount) * item.taxRate) / 100;\n  }, 0);\n  const total = subtotal - totalDiscount + totalTax;\n\n  const template = data.template || \"modern\";\n  \n  switch (template) {\n    case \"classic\":\n      generateClassicTemplate(doc, data, subtotal, totalDiscount, totalTax, total);\n      break;\n    case \"minimal\":\n      generateMinimalTemplate(doc, data, subtotal, totalDiscount, totalTax, total);\n      break;\n    case \"modern\":\n    default:\n      generateModernTemplate(doc, data, subtotal, totalDiscount, totalTax, total);\n      break;\n  }\n\n  doc.save(`invoice-${data.invoiceNumber}.pdf`);\n}\n","size_bytes":13776},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 10% 10%;\n\n  --border: 240 6% 90%;\n\n  --card: 240 5% 96%;\n\n  --card-foreground: 240 10% 10%;\n\n  --card-border: 240 6% 92%;\n\n  --sidebar: 240 5% 94%;\n\n  --sidebar-foreground: 240 10% 10%;\n\n  --sidebar-border: 240 6% 88%;\n\n  --sidebar-primary: 220 90% 56%;\n\n  --sidebar-primary-foreground: 220 10% 98%;\n\n  --sidebar-accent: 240 5% 90%;\n\n  --sidebar-accent-foreground: 240 10% 10%;\n\n  --sidebar-ring: 220 90% 56%;\n\n  --popover: 240 5% 92%;\n\n  --popover-foreground: 240 10% 10%;\n\n  --popover-border: 240 6% 86%;\n\n  --primary: 220 90% 56%;\n\n  --primary-foreground: 220 10% 98%;\n\n  --secondary: 240 5% 88%;\n\n  --secondary-foreground: 240 10% 10%;\n\n  --muted: 240 6% 90%;\n\n  --muted-foreground: 240 5% 45%;\n\n  --accent: 240 8% 88%;\n\n  --accent-foreground: 240 10% 10%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 240 8% 80%;\n  --ring: 220 90% 56%;\n  --chart-1: 220 90% 56%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 340 75% 55%;\n\n  --font-sans: Inter, -apple-system, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 10% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 10% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(240 10% 10% / 0.06), 0px 1px 2px -1px hsl(240 10% 10% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(240 10% 10% / 0.08), 0px 2px 4px -1px hsl(240 10% 10% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(240 10% 10% / 0.10), 0px 3px 6px -2px hsl(240 10% 10% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 10% 10% / 0.12), 0px 4px 8px -2px hsl(240 10% 10% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(240 10% 10% / 0.14), 0px 8px 12px -4px hsl(240 10% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 10% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 10% 8%;\n\n  --foreground: 240 5% 96%;\n\n  --border: 240 6% 20%;\n\n  --card: 240 8% 12%;\n\n  --card-foreground: 240 5% 96%;\n\n  --card-border: 240 6% 16%;\n\n  --sidebar: 240 8% 14%;\n\n  --sidebar-foreground: 240 5% 96%;\n\n  --sidebar-border: 240 6% 18%;\n\n  --sidebar-primary: 220 90% 60%;\n\n  --sidebar-primary-foreground: 220 10% 98%;\n\n  --sidebar-accent: 240 6% 18%;\n\n  --sidebar-accent-foreground: 240 5% 96%;\n\n  --sidebar-ring: 220 90% 60%;\n\n  --popover: 240 8% 16%;\n\n  --popover-foreground: 240 5% 96%;\n\n  --popover-border: 240 6% 22%;\n\n  --primary: 220 90% 60%;\n\n  --primary-foreground: 220 10% 98%;\n\n  --secondary: 240 6% 20%;\n\n  --secondary-foreground: 240 5% 96%;\n\n  --muted: 240 6% 18%;\n\n  --muted-foreground: 240 5% 65%;\n\n  --accent: 240 8% 20%;\n\n  --accent-foreground: 240 5% 96%;\n\n  --destructive: 0 80% 65%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 240 8% 30%;\n  --ring: 220 90% 60%;\n  --chart-1: 220 90% 60%;\n  --chart-2: 142 70% 45%;\n  --chart-3: 38 90% 55%;\n  --chart-4: 280 65% 65%;\n  --chart-5: 340 75% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.30);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.40);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.40);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.40), 0px 2px 4px -1px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.45), 0px 3px 6px -2px hsl(0 0% 0% / 0.40);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.50), 0px 4px 8px -2px hsl(0 0% 0% / 0.40);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.55), 0px 8px 12px -4px hsl(0 0% 0% / 0.45);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.65);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11037},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"shared/currencies.ts":{"content":"// Comprehensive currency list supporting 170+ world currencies\nexport const currencies = [\n  // North America\n  { code: \"USD\", symbol: \"$\", name: \"US Dollar\" },\n  { code: \"CAD\", symbol: \"C$\", name: \"Canadian Dollar\" },\n  { code: \"MXN\", symbol: \"MX$\", name: \"Mexican Peso\" },\n  { code: \"GTQ\", symbol: \"Q\", name: \"Guatemalan Quetzal\" },\n  { code: \"HNL\", symbol: \"L\", name: \"Honduran Lempira\" },\n  { code: \"NIO\", symbol: \"C$\", name: \"Nicaraguan Córdoba\" },\n  { code: \"CRC\", symbol: \"₡\", name: \"Costa Rican Colón\" },\n  { code: \"PAB\", symbol: \"B/.\", name: \"Panamanian Balboa\" },\n  { code: \"DOP\", symbol: \"RD$\", name: \"Dominican Peso\" },\n  { code: \"CUP\", symbol: \"₱\", name: \"Cuban Peso\" },\n  { code: \"JMD\", symbol: \"J$\", name: \"Jamaican Dollar\" },\n  { code: \"HTG\", symbol: \"G\", name: \"Haitian Gourde\" },\n  { code: \"BBD\", symbol: \"Bds$\", name: \"Barbadian Dollar\" },\n  { code: \"TTD\", symbol: \"TT$\", name: \"Trinidad & Tobago Dollar\" },\n  { code: \"BSD\", symbol: \"B$\", name: \"Bahamian Dollar\" },\n  { code: \"BZD\", symbol: \"BZ$\", name: \"Belize Dollar\" },\n  { code: \"XCD\", symbol: \"EC$\", name: \"East Caribbean Dollar\" },\n  \n  // South America\n  { code: \"BRL\", symbol: \"R$\", name: \"Brazilian Real\" },\n  { code: \"ARS\", symbol: \"AR$\", name: \"Argentine Peso\" },\n  { code: \"CLP\", symbol: \"CL$\", name: \"Chilean Peso\" },\n  { code: \"COP\", symbol: \"COL$\", name: \"Colombian Peso\" },\n  { code: \"PEN\", symbol: \"S/\", name: \"Peruvian Sol\" },\n  { code: \"UYU\", symbol: \"$U\", name: \"Uruguayan Peso\" },\n  { code: \"VES\", symbol: \"Bs.\", name: \"Venezuelan Bolívar\" },\n  { code: \"BOB\", symbol: \"Bs.\", name: \"Bolivian Boliviano\" },\n  { code: \"PYG\", symbol: \"₲\", name: \"Paraguayan Guaraní\" },\n  { code: \"GYD\", symbol: \"G$\", name: \"Guyanese Dollar\" },\n  { code: \"SRD\", symbol: \"$\", name: \"Surinamese Dollar\" },\n  { code: \"FKP\", symbol: \"£\", name: \"Falkland Islands Pound\" },\n  \n  // Europe\n  { code: \"EUR\", symbol: \"€\", name: \"Euro\" },\n  { code: \"GBP\", symbol: \"£\", name: \"British Pound\" },\n  { code: \"CHF\", symbol: \"CHF\", name: \"Swiss Franc\" },\n  { code: \"SEK\", symbol: \"kr\", name: \"Swedish Krona\" },\n  { code: \"NOK\", symbol: \"kr\", name: \"Norwegian Krone\" },\n  { code: \"DKK\", symbol: \"kr\", name: \"Danish Krone\" },\n  { code: \"ISK\", symbol: \"kr\", name: \"Icelandic Króna\" },\n  { code: \"PLN\", symbol: \"zł\", name: \"Polish Zloty\" },\n  { code: \"CZK\", symbol: \"Kč\", name: \"Czech Koruna\" },\n  { code: \"HUF\", symbol: \"Ft\", name: \"Hungarian Forint\" },\n  { code: \"RON\", symbol: \"lei\", name: \"Romanian Leu\" },\n  { code: \"BGN\", symbol: \"лв\", name: \"Bulgarian Lev\" },\n  { code: \"HRK\", symbol: \"kn\", name: \"Croatian Kuna\" },\n  { code: \"RSD\", symbol: \"din\", name: \"Serbian Dinar\" },\n  { code: \"UAH\", symbol: \"₴\", name: \"Ukrainian Hryvnia\" },\n  { code: \"BYN\", symbol: \"Br\", name: \"Belarusian Ruble\" },\n  { code: \"MKD\", symbol: \"ден\", name: \"Macedonian Denar\" },\n  { code: \"ALL\", symbol: \"L\", name: \"Albanian Lek\" },\n  { code: \"BAM\", symbol: \"KM\", name: \"Bosnia-Herzegovina Mark\" },\n  { code: \"MDL\", symbol: \"L\", name: \"Moldovan Leu\" },\n  { code: \"GEL\", symbol: \"₾\", name: \"Georgian Lari\" },\n  { code: \"AMD\", symbol: \"֏\", name: \"Armenian Dram\" },\n  { code: \"AZN\", symbol: \"₼\", name: \"Azerbaijani Manat\" },\n  \n  // Asia Pacific\n  { code: \"JPY\", symbol: \"¥\", name: \"Japanese Yen\" },\n  { code: \"CNY\", symbol: \"¥\", name: \"Chinese Yuan\" },\n  { code: \"KRW\", symbol: \"₩\", name: \"South Korean Won\" },\n  { code: \"INR\", symbol: \"₹\", name: \"Indian Rupee\" },\n  { code: \"SGD\", symbol: \"S$\", name: \"Singapore Dollar\" },\n  { code: \"HKD\", symbol: \"HK$\", name: \"Hong Kong Dollar\" },\n  { code: \"TWD\", symbol: \"NT$\", name: \"Taiwan Dollar\" },\n  { code: \"THB\", symbol: \"฿\", name: \"Thai Baht\" },\n  { code: \"MYR\", symbol: \"RM\", name: \"Malaysian Ringgit\" },\n  { code: \"IDR\", symbol: \"Rp\", name: \"Indonesian Rupiah\" },\n  { code: \"PHP\", symbol: \"₱\", name: \"Philippine Peso\" },\n  { code: \"VND\", symbol: \"₫\", name: \"Vietnamese Dong\" },\n  { code: \"PKR\", symbol: \"₨\", name: \"Pakistani Rupee\" },\n  { code: \"BDT\", symbol: \"৳\", name: \"Bangladeshi Taka\" },\n  { code: \"LKR\", symbol: \"Rs\", name: \"Sri Lankan Rupee\" },\n  { code: \"NPR\", symbol: \"Rs\", name: \"Nepalese Rupee\" },\n  { code: \"MMK\", symbol: \"K\", name: \"Myanmar Kyat\" },\n  { code: \"KHR\", symbol: \"៛\", name: \"Cambodian Riel\" },\n  { code: \"LAK\", symbol: \"₭\", name: \"Lao Kip\" },\n  { code: \"BND\", symbol: \"B$\", name: \"Brunei Dollar\" },\n  { code: \"MNT\", symbol: \"₮\", name: \"Mongolian Tugrik\" },\n  { code: \"KZT\", symbol: \"₸\", name: \"Kazakhstani Tenge\" },\n  { code: \"UZS\", symbol: \"so'm\", name: \"Uzbekistani Som\" },\n  { code: \"KGS\", symbol: \"с\", name: \"Kyrgyzstani Som\" },\n  { code: \"TJS\", symbol: \"ЅМ\", name: \"Tajikistani Somoni\" },\n  { code: \"TMT\", symbol: \"m\", name: \"Turkmenistani Manat\" },\n  { code: \"AFN\", symbol: \"؋\", name: \"Afghan Afghani\" },\n  { code: \"BDT\", symbol: \"৳\", name: \"Bangladeshi Taka\" },\n  { code: \"BTN\", symbol: \"Nu.\", name: \"Bhutanese Ngultrum\" },\n  { code: \"MVR\", symbol: \"Rf\", name: \"Maldivian Rufiyaa\" },\n  \n  // Oceania\n  { code: \"AUD\", symbol: \"A$\", name: \"Australian Dollar\" },\n  { code: \"NZD\", symbol: \"NZ$\", name: \"New Zealand Dollar\" },\n  { code: \"FJD\", symbol: \"FJ$\", name: \"Fijian Dollar\" },\n  { code: \"PGK\", symbol: \"K\", name: \"Papua New Guinea Kina\" },\n  { code: \"WST\", symbol: \"WS$\", name: \"Samoan Tālā\" },\n  { code: \"TOP\", symbol: \"T$\", name: \"Tongan Paʻanga\" },\n  { code: \"VUV\", symbol: \"VT\", name: \"Vanuatu Vatu\" },\n  { code: \"SBD\", symbol: \"SI$\", name: \"Solomon Islands Dollar\" },\n  { code: \"XPF\", symbol: \"₣\", name: \"CFP Franc\" },\n  \n  // Middle East\n  { code: \"AED\", symbol: \"د.إ\", name: \"UAE Dirham\" },\n  { code: \"SAR\", symbol: \"﷼\", name: \"Saudi Riyal\" },\n  { code: \"ILS\", symbol: \"₪\", name: \"Israeli Shekel\" },\n  { code: \"QAR\", symbol: \"ر.ق\", name: \"Qatari Riyal\" },\n  { code: \"KWD\", symbol: \"د.ك\", name: \"Kuwaiti Dinar\" },\n  { code: \"BHD\", symbol: \"د.ب\", name: \"Bahraini Dinar\" },\n  { code: \"OMR\", symbol: \"ر.ع.\", name: \"Omani Rial\" },\n  { code: \"JOD\", symbol: \"د.ا\", name: \"Jordanian Dinar\" },\n  { code: \"LBP\", symbol: \"ل.ل\", name: \"Lebanese Pound\" },\n  { code: \"SYP\", symbol: \"£S\", name: \"Syrian Pound\" },\n  { code: \"IQD\", symbol: \"ع.د\", name: \"Iraqi Dinar\" },\n  { code: \"YER\", symbol: \"﷼\", name: \"Yemeni Rial\" },\n  { code: \"IRR\", symbol: \"﷼\", name: \"Iranian Rial\" },\n  { code: \"TRY\", symbol: \"₺\", name: \"Turkish Lira\" },\n  \n  // Africa\n  { code: \"ZAR\", symbol: \"R\", name: \"South African Rand\" },\n  { code: \"NGN\", symbol: \"₦\", name: \"Nigerian Naira\" },\n  { code: \"EGP\", symbol: \"E£\", name: \"Egyptian Pound\" },\n  { code: \"KES\", symbol: \"KSh\", name: \"Kenyan Shilling\" },\n  { code: \"GHS\", symbol: \"₵\", name: \"Ghanaian Cedi\" },\n  { code: \"TZS\", symbol: \"TSh\", name: \"Tanzanian Shilling\" },\n  { code: \"UGX\", symbol: \"USh\", name: \"Ugandan Shilling\" },\n  { code: \"MAD\", symbol: \"د.م.\", name: \"Moroccan Dirham\" },\n  { code: \"ETB\", symbol: \"Br\", name: \"Ethiopian Birr\" },\n  { code: \"DZD\", symbol: \"د.ج\", name: \"Algerian Dinar\" },\n  { code: \"TND\", symbol: \"د.ت\", name: \"Tunisian Dinar\" },\n  { code: \"LYD\", symbol: \"ل.د\", name: \"Libyan Dinar\" },\n  { code: \"SDG\", symbol: \"ج.س.\", name: \"Sudanese Pound\" },\n  { code: \"SSP\", symbol: \"£\", name: \"South Sudanese Pound\" },\n  { code: \"SOS\", symbol: \"Sh\", name: \"Somali Shilling\" },\n  { code: \"DJF\", symbol: \"Fdj\", name: \"Djiboutian Franc\" },\n  { code: \"ERN\", symbol: \"Nfk\", name: \"Eritrean Nakfa\" },\n  { code: \"MUR\", symbol: \"₨\", name: \"Mauritian Rupee\" },\n  { code: \"SCR\", symbol: \"₨\", name: \"Seychellois Rupee\" },\n  { code: \"MGA\", symbol: \"Ar\", name: \"Malagasy Ariary\" },\n  { code: \"XOF\", symbol: \"CFA\", name: \"West African CFA Franc\" },\n  { code: \"XAF\", symbol: \"FCFA\", name: \"Central African CFA Franc\" },\n  { code: \"KMF\", symbol: \"CF\", name: \"Comorian Franc\" },\n  { code: \"BWP\", symbol: \"P\", name: \"Botswana Pula\" },\n  { code: \"NAD\", symbol: \"N$\", name: \"Namibian Dollar\" },\n  { code: \"SZL\", symbol: \"L\", name: \"Swazi Lilangeni\" },\n  { code: \"LSL\", symbol: \"L\", name: \"Lesotho Loti\" },\n  { code: \"ZMW\", symbol: \"ZK\", name: \"Zambian Kwacha\" },\n  { code: \"MWK\", symbol: \"MK\", name: \"Malawian Kwacha\" },\n  { code: \"MZN\", symbol: \"MT\", name: \"Mozambican Metical\" },\n  { code: \"ZWL\", symbol: \"Z$\", name: \"Zimbabwean Dollar\" },\n  { code: \"AOA\", symbol: \"Kz\", name: \"Angolan Kwanza\" },\n  { code: \"CVE\", symbol: \"$\", name: \"Cape Verdean Escudo\" },\n  { code: \"GMD\", symbol: \"D\", name: \"Gambian Dalasi\" },\n  { code: \"GNF\", symbol: \"FG\", name: \"Guinean Franc\" },\n  { code: \"LRD\", symbol: \"L$\", name: \"Liberian Dollar\" },\n  { code: \"SLE\", symbol: \"Le\", name: \"Sierra Leonean Leone\" },\n  { code: \"STN\", symbol: \"Db\", name: \"São Tomé & Príncipe Dobra\" },\n  { code: \"BIF\", symbol: \"FBu\", name: \"Burundian Franc\" },\n  { code: \"RWF\", symbol: \"FRw\", name: \"Rwandan Franc\" },\n  { code: \"CDF\", symbol: \"FC\", name: \"Congolese Franc\" },\n  \n  // Russia & Former Soviet States\n  { code: \"RUB\", symbol: \"₽\", name: \"Russian Ruble\" },\n  \n  // Special & Cryptocurrency Representation\n  { code: \"XAU\", symbol: \"oz t\", name: \"Gold (troy ounce)\" },\n  { code: \"XAG\", symbol: \"oz t\", name: \"Silver (troy ounce)\" },\n  { code: \"XPT\", symbol: \"oz t\", name: \"Platinum (troy ounce)\" },\n  { code: \"XPD\", symbol: \"oz t\", name: \"Palladium (troy ounce)\" },\n  \n  // Additional Asian Currencies\n  { code: \"MOP\", symbol: \"MOP$\", name: \"Macanese Pataca\" },\n  { code: \"KPW\", symbol: \"₩\", name: \"North Korean Won\" },\n  \n  // Additional Caribbean\n  { code: \"AWG\", symbol: \"ƒ\", name: \"Aruban Florin\" },\n  { code: \"ANG\", symbol: \"ƒ\", name: \"Netherlands Antillean Guilder\" },\n  { code: \"KYD\", symbol: \"CI$\", name: \"Cayman Islands Dollar\" },\n  { code: \"BMD\", symbol: \"$\", name: \"Bermudian Dollar\" },\n  \n  // Additional European\n  { code: \"GIP\", symbol: \"£\", name: \"Gibraltar Pound\" },\n  { code: \"FKP\", symbol: \"£\", name: \"Falkland Islands Pound\" },\n  { code: \"SHP\", symbol: \"£\", name: \"Saint Helena Pound\" },\n  \n  // Additional Pacific\n  { code: \"KID\", symbol: \"$\", name: \"Kiribati Dollar\" },\n  { code: \"NRD\", symbol: \"$\", name: \"Nauruan Dollar\" },\n  { code: \"TVD\", symbol: \"$\", name: \"Tuvaluan Dollar\" },\n  \n  // Additional Middle East & North Africa\n  { code: \"MRU\", symbol: \"UM\", name: \"Mauritanian Ouguiya\" },\n];\n","size_bytes":10131}},"version":2}